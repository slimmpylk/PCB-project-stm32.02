
dht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003674  08003674  00004674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036e8  080036e8  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  080036e8  080036e8  000046e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036f0  080036f0  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036f0  080036f0  000046f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036f4  080036f4  000046f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080036f8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000068  08003760  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08003760  00005280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b09a  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a8d  00000000  00000000  00010132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  00011bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a4  00000000  00000000  000126e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001772e  00000000  00000000  00012f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c9a7  00000000  00000000  0002a6ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000908bd  00000000  00000000  00037061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c791e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035c4  00000000  00000000  000c7964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000caf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800365c 	.word	0x0800365c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800365c 	.word	0x0800365c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000574:	4b14      	ldr	r3, [pc, #80]	@ (80005c8 <DWT_Delay_Init+0x58>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	4a13      	ldr	r2, [pc, #76]	@ (80005c8 <DWT_Delay_Init+0x58>)
 800057a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800057e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000580:	4b11      	ldr	r3, [pc, #68]	@ (80005c8 <DWT_Delay_Init+0x58>)
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	4a10      	ldr	r2, [pc, #64]	@ (80005c8 <DWT_Delay_Init+0x58>)
 8000586:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800058a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800058c:	4b0f      	ldr	r3, [pc, #60]	@ (80005cc <DWT_Delay_Init+0x5c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a0e      	ldr	r2, [pc, #56]	@ (80005cc <DWT_Delay_Init+0x5c>)
 8000592:	f023 0301 	bic.w	r3, r3, #1
 8000596:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000598:	4b0c      	ldr	r3, [pc, #48]	@ (80005cc <DWT_Delay_Init+0x5c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a0b      	ldr	r2, [pc, #44]	@ (80005cc <DWT_Delay_Init+0x5c>)
 800059e:	f043 0301 	orr.w	r3, r3, #1
 80005a2:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80005a4:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <DWT_Delay_Init+0x5c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80005aa:	bf00      	nop
     __ASM volatile ("NOP");
 80005ac:	bf00      	nop
  __ASM volatile ("NOP");
 80005ae:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80005b0:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <DWT_Delay_Init+0x5c>)
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80005b8:	2300      	movs	r3, #0
 80005ba:	e000      	b.n	80005be <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80005bc:	2301      	movs	r3, #1
  }
}
 80005be:	4618      	mov	r0, r3
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	e000edf0 	.word	0xe000edf0
 80005cc:	e0001000 	.word	0xe0001000

080005d0 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80005d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000610 <delay+0x40>)
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80005de:	f001 fbf1 	bl	8001dc4 <HAL_RCC_GetHCLKFreq>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000614 <delay+0x44>)
 80005e6:	fba2 2303 	umull	r2, r3, r2, r3
 80005ea:	0c9b      	lsrs	r3, r3, #18
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	fb02 f303 	mul.w	r3, r2, r3
 80005f2:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80005f4:	bf00      	nop
 80005f6:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <delay+0x40>)
 80005f8:	685a      	ldr	r2, [r3, #4]
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	1ad2      	subs	r2, r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	429a      	cmp	r2, r3
 8000602:	d3f8      	bcc.n	80005f6 <delay+0x26>
}
 8000604:	bf00      	nop
 8000606:	bf00      	nop
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	e0001000 	.word	0xe0001000
 8000614:	431bde83 	.word	0x431bde83

08000618 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000634:	887b      	ldrh	r3, [r7, #2]
 8000636:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000638:	2301      	movs	r3, #1
 800063a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	4619      	mov	r1, r3
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f000 fda2 	bl	8001190 <HAL_GPIO_Init>
}
 800064c:	bf00      	nop
 800064e:	3720      	adds	r7, #32
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	460b      	mov	r3, r1
 800065e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000670:	887b      	ldrh	r3, [r7, #2]
 8000672:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	4619      	mov	r1, r3
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f000 fd84 	bl	8001190 <HAL_GPIO_Init>
}
 8000688:	bf00      	nop
 800068a:	3720      	adds	r7, #32
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <DHT_Start>:


void DHT_Start (void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000694:	f7ff ff6c 	bl	8000570 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000698:	2102      	movs	r1, #2
 800069a:	480d      	ldr	r0, [pc, #52]	@ (80006d0 <DHT_Start+0x40>)
 800069c:	f7ff ffbc 	bl	8000618 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 80006a0:	2200      	movs	r2, #0
 80006a2:	2102      	movs	r1, #2
 80006a4:	480a      	ldr	r0, [pc, #40]	@ (80006d0 <DHT_Start+0x40>)
 80006a6:	f000 ff0f 	bl	80014c8 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 80006aa:	f244 6050 	movw	r0, #18000	@ 0x4650
 80006ae:	f7ff ff8f 	bl	80005d0 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 80006b2:	2201      	movs	r2, #1
 80006b4:	2102      	movs	r1, #2
 80006b6:	4806      	ldr	r0, [pc, #24]	@ (80006d0 <DHT_Start+0x40>)
 80006b8:	f000 ff06 	bl	80014c8 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 80006bc:	2014      	movs	r0, #20
 80006be:	f7ff ff87 	bl	80005d0 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 80006c2:	2102      	movs	r1, #2
 80006c4:	4802      	ldr	r0, [pc, #8]	@ (80006d0 <DHT_Start+0x40>)
 80006c6:	f7ff ffc5 	bl	8000654 <Set_Pin_Input>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40020000 	.word	0x40020000

080006d4 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	71fb      	strb	r3, [r7, #7]
	delay (40);
 80006de:	2028      	movs	r0, #40	@ 0x28
 80006e0:	f7ff ff76 	bl	80005d0 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 80006e4:	2102      	movs	r1, #2
 80006e6:	4811      	ldr	r0, [pc, #68]	@ (800072c <DHT_Check_Response+0x58>)
 80006e8:	f000 fed6 	bl	8001498 <HAL_GPIO_ReadPin>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d10e      	bne.n	8000710 <DHT_Check_Response+0x3c>
	{
		delay (80);
 80006f2:	2050      	movs	r0, #80	@ 0x50
 80006f4:	f7ff ff6c 	bl	80005d0 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 80006f8:	2102      	movs	r1, #2
 80006fa:	480c      	ldr	r0, [pc, #48]	@ (800072c <DHT_Check_Response+0x58>)
 80006fc:	f000 fecc 	bl	8001498 <HAL_GPIO_ReadPin>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d002      	beq.n	800070c <DHT_Check_Response+0x38>
 8000706:	2301      	movs	r3, #1
 8000708:	71fb      	strb	r3, [r7, #7]
 800070a:	e001      	b.n	8000710 <DHT_Check_Response+0x3c>
		else Response = -1;
 800070c:	23ff      	movs	r3, #255	@ 0xff
 800070e:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000710:	bf00      	nop
 8000712:	2102      	movs	r1, #2
 8000714:	4805      	ldr	r0, [pc, #20]	@ (800072c <DHT_Check_Response+0x58>)
 8000716:	f000 febf 	bl	8001498 <HAL_GPIO_ReadPin>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d1f8      	bne.n	8000712 <DHT_Check_Response+0x3e>

	return Response;
 8000720:	79fb      	ldrb	r3, [r7, #7]
}
 8000722:	4618      	mov	r0, r3
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40020000 	.word	0x40020000

08000730 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000736:	2300      	movs	r3, #0
 8000738:	71bb      	strb	r3, [r7, #6]
 800073a:	e037      	b.n	80007ac <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 800073c:	bf00      	nop
 800073e:	2102      	movs	r1, #2
 8000740:	481e      	ldr	r0, [pc, #120]	@ (80007bc <DHT_Read+0x8c>)
 8000742:	f000 fea9 	bl	8001498 <HAL_GPIO_ReadPin>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d0f8      	beq.n	800073e <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 800074c:	2028      	movs	r0, #40	@ 0x28
 800074e:	f7ff ff3f 	bl	80005d0 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000752:	2102      	movs	r1, #2
 8000754:	4819      	ldr	r0, [pc, #100]	@ (80007bc <DHT_Read+0x8c>)
 8000756:	f000 fe9f 	bl	8001498 <HAL_GPIO_ReadPin>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d10e      	bne.n	800077e <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	f1c3 0307 	rsb	r3, r3, #7
 8000766:	2201      	movs	r2, #1
 8000768:	fa02 f303 	lsl.w	r3, r2, r3
 800076c:	b25b      	sxtb	r3, r3
 800076e:	43db      	mvns	r3, r3
 8000770:	b25a      	sxtb	r2, r3
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	4013      	ands	r3, r2
 8000778:	b25b      	sxtb	r3, r3
 800077a:	71fb      	strb	r3, [r7, #7]
 800077c:	e00b      	b.n	8000796 <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 800077e:	79bb      	ldrb	r3, [r7, #6]
 8000780:	f1c3 0307 	rsb	r3, r3, #7
 8000784:	2201      	movs	r2, #1
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	b25a      	sxtb	r2, r3
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	4313      	orrs	r3, r2
 8000792:	b25b      	sxtb	r3, r3
 8000794:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8000796:	bf00      	nop
 8000798:	2102      	movs	r1, #2
 800079a:	4808      	ldr	r0, [pc, #32]	@ (80007bc <DHT_Read+0x8c>)
 800079c:	f000 fe7c 	bl	8001498 <HAL_GPIO_ReadPin>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d1f8      	bne.n	8000798 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 80007a6:	79bb      	ldrb	r3, [r7, #6]
 80007a8:	3301      	adds	r3, #1
 80007aa:	71bb      	strb	r3, [r7, #6]
 80007ac:	79bb      	ldrb	r3, [r7, #6]
 80007ae:	2b07      	cmp	r3, #7
 80007b0:	d9c4      	bls.n	800073c <DHT_Read+0xc>
	}
	return i;
 80007b2:	79fb      	ldrb	r3, [r7, #7]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40020000 	.word	0x40020000

080007c0 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 80007c8:	f7ff ff62 	bl	8000690 <DHT_Start>
	Presence = DHT_Check_Response ();
 80007cc:	f7ff ff82 	bl	80006d4 <DHT_Check_Response>
 80007d0:	4603      	mov	r3, r0
 80007d2:	461a      	mov	r2, r3
 80007d4:	4b23      	ldr	r3, [pc, #140]	@ (8000864 <DHT_GetData+0xa4>)
 80007d6:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 80007d8:	f7ff ffaa 	bl	8000730 <DHT_Read>
 80007dc:	4603      	mov	r3, r0
 80007de:	461a      	mov	r2, r3
 80007e0:	4b21      	ldr	r3, [pc, #132]	@ (8000868 <DHT_GetData+0xa8>)
 80007e2:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 80007e4:	f7ff ffa4 	bl	8000730 <DHT_Read>
 80007e8:	4603      	mov	r3, r0
 80007ea:	461a      	mov	r2, r3
 80007ec:	4b1f      	ldr	r3, [pc, #124]	@ (800086c <DHT_GetData+0xac>)
 80007ee:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 80007f0:	f7ff ff9e 	bl	8000730 <DHT_Read>
 80007f4:	4603      	mov	r3, r0
 80007f6:	461a      	mov	r2, r3
 80007f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000870 <DHT_GetData+0xb0>)
 80007fa:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 80007fc:	f7ff ff98 	bl	8000730 <DHT_Read>
 8000800:	4603      	mov	r3, r0
 8000802:	461a      	mov	r2, r3
 8000804:	4b1b      	ldr	r3, [pc, #108]	@ (8000874 <DHT_GetData+0xb4>)
 8000806:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8000808:	f7ff ff92 	bl	8000730 <DHT_Read>
 800080c:	4603      	mov	r3, r0
 800080e:	461a      	mov	r2, r3
 8000810:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <DHT_GetData+0xb8>)
 8000812:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8000814:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <DHT_GetData+0xb8>)
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	4619      	mov	r1, r3
 800081a:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <DHT_GetData+0xa8>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	461a      	mov	r2, r3
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <DHT_GetData+0xac>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	4413      	add	r3, r2
 8000826:	4a12      	ldr	r2, [pc, #72]	@ (8000870 <DHT_GetData+0xb0>)
 8000828:	7812      	ldrb	r2, [r2, #0]
 800082a:	4413      	add	r3, r2
 800082c:	4a11      	ldr	r2, [pc, #68]	@ (8000874 <DHT_GetData+0xb4>)
 800082e:	7812      	ldrb	r2, [r2, #0]
 8000830:	4413      	add	r3, r2
 8000832:	4299      	cmp	r1, r3
 8000834:	d111      	bne.n	800085a <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <DHT_GetData+0xb0>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	ee07 3a90 	vmov	s15, r3
 800083e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 8000848:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <DHT_GetData+0xa8>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	ee07 3a90 	vmov	s15, r3
 8000850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000008a 	.word	0x2000008a
 8000868:	20000084 	.word	0x20000084
 800086c:	20000085 	.word	0x20000085
 8000870:	20000086 	.word	0x20000086
 8000874:	20000087 	.word	0x20000087
 8000878:	20000088 	.word	0x20000088

0800087c <_write>:
/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim10;

UART_HandleTypeDef huart2;
int _write(int file, char *data, int len)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d00a      	beq.n	80008a4 <_write+0x28>
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	2b02      	cmp	r3, #2
 8000892:	d007      	beq.n	80008a4 <_write+0x28>
   {
      errno = EBADF;
 8000894:	f002 f918 	bl	8002ac8 <__errno>
 8000898:	4603      	mov	r3, r0
 800089a:	2209      	movs	r2, #9
 800089c:	601a      	str	r2, [r3, #0]
      return -1;
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
 80008a2:	e008      	b.n	80008b6 <_write+0x3a>
   }

   // UART transmission function, for instance, HAL_UART_Transmit for HAL drivers
   HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ac:	68b9      	ldr	r1, [r7, #8]
 80008ae:	4804      	ldr	r0, [pc, #16]	@ (80008c0 <_write+0x44>)
 80008b0:	f001 fbe8 	bl	8002084 <HAL_UART_Transmit>

   // return # of bytes written - as best we can tell
   return len;
 80008b4:	687b      	ldr	r3, [r7, #4]
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200000d4 	.word	0x200000d4

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ca:	f000 fae5 	bl	8000e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ce:	f000 f835 	bl	800093c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d2:	f000 f8e9 	bl	8000aa8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008d6:	f000 f8bd 	bl	8000a54 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 80008da:	f000 f897 	bl	8000a0c <MX_TIM10_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  DHT_GetData(&DHT11_Data);
 80008de:	4813      	ldr	r0, [pc, #76]	@ (800092c <main+0x68>)
 80008e0:	f7ff ff6e 	bl	80007c0 <DHT_GetData>
  	  Temperature = DHT11_Data.Temperature;
 80008e4:	4b11      	ldr	r3, [pc, #68]	@ (800092c <main+0x68>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a11      	ldr	r2, [pc, #68]	@ (8000930 <main+0x6c>)
 80008ea:	6013      	str	r3, [r2, #0]
	  Humidity = DHT11_Data.Humidity;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <main+0x68>)
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	4a10      	ldr	r2, [pc, #64]	@ (8000934 <main+0x70>)
 80008f2:	6013      	str	r3, [r2, #0]
	  int Temperature = (int)DHT11_Data.Temperature;
 80008f4:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <main+0x68>)
 80008f6:	edd3 7a00 	vldr	s15, [r3]
 80008fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008fe:	ee17 3a90 	vmov	r3, s15
 8000902:	607b      	str	r3, [r7, #4]
	  int Humidity = (int)DHT11_Data.Humidity;
 8000904:	4b09      	ldr	r3, [pc, #36]	@ (800092c <main+0x68>)
 8000906:	edd3 7a01 	vldr	s15, [r3, #4]
 800090a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800090e:	ee17 3a90 	vmov	r3, s15
 8000912:	603b      	str	r3, [r7, #0]
	  printf("Temperature: %d C, Humidity: %d %%\r\n", Temperature, Humidity);
 8000914:	683a      	ldr	r2, [r7, #0]
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	4807      	ldr	r0, [pc, #28]	@ (8000938 <main+0x74>)
 800091a:	f002 f831 	bl	8002980 <iprintf>
	  HAL_Delay(3000);
 800091e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000922:	f000 fb2b 	bl	8000f7c <HAL_Delay>
  {
 8000926:	bf00      	nop
 8000928:	e7d9      	b.n	80008de <main+0x1a>
 800092a:	bf00      	nop
 800092c:	2000011c 	.word	0x2000011c
 8000930:	20000124 	.word	0x20000124
 8000934:	20000128 	.word	0x20000128
 8000938:	08003674 	.word	0x08003674

0800093c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b094      	sub	sp, #80	@ 0x50
 8000940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000942:	f107 0320 	add.w	r3, r7, #32
 8000946:	2230      	movs	r2, #48	@ 0x30
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f002 f86d 	bl	8002a2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000960:	2300      	movs	r3, #0
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	4b27      	ldr	r3, [pc, #156]	@ (8000a04 <SystemClock_Config+0xc8>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000968:	4a26      	ldr	r2, [pc, #152]	@ (8000a04 <SystemClock_Config+0xc8>)
 800096a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800096e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000970:	4b24      	ldr	r3, [pc, #144]	@ (8000a04 <SystemClock_Config+0xc8>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800097c:	2300      	movs	r3, #0
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	4b21      	ldr	r3, [pc, #132]	@ (8000a08 <SystemClock_Config+0xcc>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a20      	ldr	r2, [pc, #128]	@ (8000a08 <SystemClock_Config+0xcc>)
 8000986:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800098a:	6013      	str	r3, [r2, #0]
 800098c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a08 <SystemClock_Config+0xcc>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000998:	2301      	movs	r3, #1
 800099a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800099c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a2:	2302      	movs	r3, #2
 80009a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009ac:	2304      	movs	r3, #4
 80009ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80009b0:	2332      	movs	r3, #50	@ 0x32
 80009b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009b8:	2304      	movs	r3, #4
 80009ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	f107 0320 	add.w	r3, r7, #32
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fd9b 	bl	80014fc <HAL_RCC_OscConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009cc:	f000 f8da 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d0:	230f      	movs	r3, #15
 80009d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d4:	2302      	movs	r3, #2
 80009d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	2101      	movs	r1, #1
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 fffd 	bl	80019ec <HAL_RCC_ClockConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009f8:	f000 f8c4 	bl	8000b84 <Error_Handler>
  }
}
 80009fc:	bf00      	nop
 80009fe:	3750      	adds	r7, #80	@ 0x50
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40007000 	.word	0x40007000

08000a0c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000a10:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <MX_TIM10_Init+0x40>)
 8000a12:	4a0f      	ldr	r2, [pc, #60]	@ (8000a50 <MX_TIM10_Init+0x44>)
 8000a14:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 50-1;
 8000a16:	4b0d      	ldr	r3, [pc, #52]	@ (8000a4c <MX_TIM10_Init+0x40>)
 8000a18:	2231      	movs	r2, #49	@ 0x31
 8000a1a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <MX_TIM10_Init+0x40>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8000a22:	4b0a      	ldr	r3, [pc, #40]	@ (8000a4c <MX_TIM10_Init+0x40>)
 8000a24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a28:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <MX_TIM10_Init+0x40>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <MX_TIM10_Init+0x40>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	@ (8000a4c <MX_TIM10_Init+0x40>)
 8000a38:	f001 f9f8 	bl	8001e2c <HAL_TIM_Base_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000a42:	f000 f89f 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	2000008c 	.word	0x2000008c
 8000a50:	40014400 	.word	0x40014400

08000a54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a58:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a5a:	4a12      	ldr	r2, [pc, #72]	@ (8000aa4 <MX_USART2_UART_Init+0x50>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a5e:	4b10      	ldr	r3, [pc, #64]	@ (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a8a:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <MX_USART2_UART_Init+0x4c>)
 8000a8c:	f001 faaa 	bl	8001fe4 <HAL_UART_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a96:	f000 f875 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200000d4 	.word	0x200000d4
 8000aa4:	40004400 	.word	0x40004400

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	@ 0x28
 8000aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b78 <MX_GPIO_Init+0xd0>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	4a2c      	ldr	r2, [pc, #176]	@ (8000b78 <MX_GPIO_Init+0xd0>)
 8000ac8:	f043 0304 	orr.w	r3, r3, #4
 8000acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ace:	4b2a      	ldr	r3, [pc, #168]	@ (8000b78 <MX_GPIO_Init+0xd0>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	f003 0304 	and.w	r3, r3, #4
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	4b26      	ldr	r3, [pc, #152]	@ (8000b78 <MX_GPIO_Init+0xd0>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a25      	ldr	r2, [pc, #148]	@ (8000b78 <MX_GPIO_Init+0xd0>)
 8000ae4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b23      	ldr	r3, [pc, #140]	@ (8000b78 <MX_GPIO_Init+0xd0>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	4b1f      	ldr	r3, [pc, #124]	@ (8000b78 <MX_GPIO_Init+0xd0>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	4a1e      	ldr	r2, [pc, #120]	@ (8000b78 <MX_GPIO_Init+0xd0>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b06:	4b1c      	ldr	r3, [pc, #112]	@ (8000b78 <MX_GPIO_Init+0xd0>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b18      	ldr	r3, [pc, #96]	@ (8000b78 <MX_GPIO_Init+0xd0>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	4a17      	ldr	r2, [pc, #92]	@ (8000b78 <MX_GPIO_Init+0xd0>)
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b22:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <MX_GPIO_Init+0xd0>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2122      	movs	r1, #34	@ 0x22
 8000b32:	4812      	ldr	r0, [pc, #72]	@ (8000b7c <MX_GPIO_Init+0xd4>)
 8000b34:	f000 fcc8 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b3e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480c      	ldr	r0, [pc, #48]	@ (8000b80 <MX_GPIO_Init+0xd8>)
 8000b50:	f000 fb1e 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
 8000b54:	2322      	movs	r3, #34	@ 0x22
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4804      	ldr	r0, [pc, #16]	@ (8000b7c <MX_GPIO_Init+0xd4>)
 8000b6c:	f000 fb10 	bl	8001190 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b70:	bf00      	nop
 8000b72:	3728      	adds	r7, #40	@ 0x28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020000 	.word	0x40020000
 8000b80:	40020800 	.word	0x40020800

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <Error_Handler+0x8>

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <HAL_MspInit+0x4c>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bdc <HAL_MspInit+0x4c>)
 8000ba0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <HAL_MspInit+0x4c>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000baa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <HAL_MspInit+0x4c>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bba:	4a08      	ldr	r2, [pc, #32]	@ (8000bdc <HAL_MspInit+0x4c>)
 8000bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc2:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <HAL_MspInit+0x4c>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bce:	2007      	movs	r0, #7
 8000bd0:	f000 faaa 	bl	8001128 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40023800 	.word	0x40023800

08000be0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0b      	ldr	r2, [pc, #44]	@ (8000c1c <HAL_TIM_Base_MspInit+0x3c>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d10d      	bne.n	8000c0e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <HAL_TIM_Base_MspInit+0x40>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfa:	4a09      	ldr	r2, [pc, #36]	@ (8000c20 <HAL_TIM_Base_MspInit+0x40>)
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c02:	4b07      	ldr	r3, [pc, #28]	@ (8000c20 <HAL_TIM_Base_MspInit+0x40>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40014400 	.word	0x40014400
 8000c20:	40023800 	.word	0x40023800

08000c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	@ 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a19      	ldr	r2, [pc, #100]	@ (8000ca8 <HAL_UART_MspInit+0x84>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d12b      	bne.n	8000c9e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b18      	ldr	r3, [pc, #96]	@ (8000cac <HAL_UART_MspInit+0x88>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	4a17      	ldr	r2, [pc, #92]	@ (8000cac <HAL_UART_MspInit+0x88>)
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c56:	4b15      	ldr	r3, [pc, #84]	@ (8000cac <HAL_UART_MspInit+0x88>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <HAL_UART_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a10      	ldr	r2, [pc, #64]	@ (8000cac <HAL_UART_MspInit+0x88>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <HAL_UART_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c7e:	230c      	movs	r3, #12
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c8e:	2307      	movs	r3, #7
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <HAL_UART_MspInit+0x8c>)
 8000c9a:	f000 fa79 	bl	8001190 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	@ 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40004400 	.word	0x40004400
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <NMI_Handler+0x4>

08000cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <MemManage_Handler+0x4>

08000ccc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0a:	f000 f917 	bl	8000f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	60f8      	str	r0, [r7, #12]
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	e00a      	b.n	8000d3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d24:	f3af 8000 	nop.w
 8000d28:	4601      	mov	r1, r0
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	1c5a      	adds	r2, r3, #1
 8000d2e:	60ba      	str	r2, [r7, #8]
 8000d30:	b2ca      	uxtb	r2, r1
 8000d32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	3301      	adds	r3, #1
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	dbf0      	blt.n	8000d24 <_read+0x12>
  }

  return len;
 8000d42:	687b      	ldr	r3, [r7, #4]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d74:	605a      	str	r2, [r3, #4]
  return 0;
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <_isatty>:

int _isatty(int file)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d8c:	2301      	movs	r3, #1
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b085      	sub	sp, #20
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	60f8      	str	r0, [r7, #12]
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000da6:	2300      	movs	r3, #0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dbc:	4a14      	ldr	r2, [pc, #80]	@ (8000e10 <_sbrk+0x5c>)
 8000dbe:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <_sbrk+0x60>)
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc8:	4b13      	ldr	r3, [pc, #76]	@ (8000e18 <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d102      	bne.n	8000dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <_sbrk+0x64>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <_sbrk+0x68>)
 8000dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd6:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d207      	bcs.n	8000df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de4:	f001 fe70 	bl	8002ac8 <__errno>
 8000de8:	4603      	mov	r3, r0
 8000dea:	220c      	movs	r2, #12
 8000dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
 8000df2:	e009      	b.n	8000e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df4:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfa:	4b07      	ldr	r3, [pc, #28]	@ (8000e18 <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	4a05      	ldr	r2, [pc, #20]	@ (8000e18 <_sbrk+0x64>)
 8000e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e06:	68fb      	ldr	r3, [r7, #12]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20020000 	.word	0x20020000
 8000e14:	00000400 	.word	0x00000400
 8000e18:	2000012c 	.word	0x2000012c
 8000e1c:	20000280 	.word	0x20000280

08000e20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <SystemInit+0x20>)
 8000e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e2a:	4a05      	ldr	r2, [pc, #20]	@ (8000e40 <SystemInit+0x20>)
 8000e2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e48:	f7ff ffea 	bl	8000e20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e4c:	480c      	ldr	r0, [pc, #48]	@ (8000e80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e4e:	490d      	ldr	r1, [pc, #52]	@ (8000e84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e50:	4a0d      	ldr	r2, [pc, #52]	@ (8000e88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a0a      	ldr	r2, [pc, #40]	@ (8000e8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e64:	4c0a      	ldr	r4, [pc, #40]	@ (8000e90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e72:	f001 fe2f 	bl	8002ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e76:	f7ff fd25 	bl	80008c4 <main>
  bx  lr    
 8000e7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e84:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e88:	080036f8 	.word	0x080036f8
  ldr r2, =_sbss
 8000e8c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e90:	20000280 	.word	0x20000280

08000e94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC_IRQHandler>
	...

08000e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed8 <HAL_Init+0x40>)
 8000ea2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed8 <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed8 <HAL_Init+0x40>)
 8000eae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4b08      	ldr	r3, [pc, #32]	@ (8000ed8 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a07      	ldr	r2, [pc, #28]	@ (8000ed8 <HAL_Init+0x40>)
 8000eba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 f931 	bl	8001128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f000 f808 	bl	8000edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ecc:	f7ff fe60 	bl	8000b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023c00 	.word	0x40023c00

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <HAL_InitTick+0x54>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <HAL_InitTick+0x58>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f93b 	bl	8001176 <HAL_SYSTICK_Config>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00e      	b.n	8000f28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d80a      	bhi.n	8000f26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f10:	2200      	movs	r2, #0
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f000 f911 	bl	800113e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f1c:	4a06      	ldr	r2, [pc, #24]	@ (8000f38 <HAL_InitTick+0x5c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e000      	b.n	8000f28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000004 	.word	0x20000004

08000f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <HAL_IncTick+0x20>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <HAL_IncTick+0x24>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a04      	ldr	r2, [pc, #16]	@ (8000f60 <HAL_IncTick+0x24>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20000130 	.word	0x20000130

08000f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return uwTick;
 8000f68:	4b03      	ldr	r3, [pc, #12]	@ (8000f78 <HAL_GetTick+0x14>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000130 	.word	0x20000130

08000f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f84:	f7ff ffee 	bl	8000f64 <HAL_GetTick>
 8000f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f94:	d005      	beq.n	8000fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f96:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <HAL_Delay+0x44>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fa2:	bf00      	nop
 8000fa4:	f7ff ffde 	bl	8000f64 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d8f7      	bhi.n	8000fa4 <HAL_Delay+0x28>
  {
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000008 	.word	0x20000008

08000fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	@ (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001010:	4b04      	ldr	r3, [pc, #16]	@ (8001024 <__NVIC_GetPriorityGrouping+0x18>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	f003 0307 	and.w	r3, r3, #7
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	2b00      	cmp	r3, #0
 800103a:	db0a      	blt.n	8001052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	b2da      	uxtb	r2, r3
 8001040:	490c      	ldr	r1, [pc, #48]	@ (8001074 <__NVIC_SetPriority+0x4c>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	0112      	lsls	r2, r2, #4
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	440b      	add	r3, r1
 800104c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001050:	e00a      	b.n	8001068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4908      	ldr	r1, [pc, #32]	@ (8001078 <__NVIC_SetPriority+0x50>)
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	3b04      	subs	r3, #4
 8001060:	0112      	lsls	r2, r2, #4
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	440b      	add	r3, r1
 8001066:	761a      	strb	r2, [r3, #24]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000e100 	.word	0xe000e100
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	@ 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f1c3 0307 	rsb	r3, r3, #7
 8001096:	2b04      	cmp	r3, #4
 8001098:	bf28      	it	cs
 800109a:	2304      	movcs	r3, #4
 800109c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3304      	adds	r3, #4
 80010a2:	2b06      	cmp	r3, #6
 80010a4:	d902      	bls.n	80010ac <NVIC_EncodePriority+0x30>
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3b03      	subs	r3, #3
 80010aa:	e000      	b.n	80010ae <NVIC_EncodePriority+0x32>
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	f04f 32ff 	mov.w	r2, #4294967295
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43da      	mvns	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	401a      	ands	r2, r3
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c4:	f04f 31ff 	mov.w	r1, #4294967295
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	43d9      	mvns	r1, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	4313      	orrs	r3, r2
         );
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3724      	adds	r7, #36	@ 0x24
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010f4:	d301      	bcc.n	80010fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010f6:	2301      	movs	r3, #1
 80010f8:	e00f      	b.n	800111a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001124 <SysTick_Config+0x40>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001102:	210f      	movs	r1, #15
 8001104:	f04f 30ff 	mov.w	r0, #4294967295
 8001108:	f7ff ff8e 	bl	8001028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800110c:	4b05      	ldr	r3, [pc, #20]	@ (8001124 <SysTick_Config+0x40>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001112:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <SysTick_Config+0x40>)
 8001114:	2207      	movs	r2, #7
 8001116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	e000e010 	.word	0xe000e010

08001128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff47 	bl	8000fc4 <__NVIC_SetPriorityGrouping>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113e:	b580      	push	{r7, lr}
 8001140:	b086      	sub	sp, #24
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001150:	f7ff ff5c 	bl	800100c <__NVIC_GetPriorityGrouping>
 8001154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	68b9      	ldr	r1, [r7, #8]
 800115a:	6978      	ldr	r0, [r7, #20]
 800115c:	f7ff ff8e 	bl	800107c <NVIC_EncodePriority>
 8001160:	4602      	mov	r2, r0
 8001162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff5d 	bl	8001028 <__NVIC_SetPriority>
}
 800116e:	bf00      	nop
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffb0 	bl	80010e4 <SysTick_Config>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	@ 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
 80011aa:	e159      	b.n	8001460 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	f040 8148 	bne.w	800145a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d005      	beq.n	80011e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d130      	bne.n	8001244 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	2203      	movs	r2, #3
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001218:	2201      	movs	r2, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	091b      	lsrs	r3, r3, #4
 800122e:	f003 0201 	and.w	r2, r3, #1
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b03      	cmp	r3, #3
 800124e:	d017      	beq.n	8001280 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d123      	bne.n	80012d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	08da      	lsrs	r2, r3, #3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3208      	adds	r2, #8
 8001294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	220f      	movs	r2, #15
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	691a      	ldr	r2, [r3, #16]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	08da      	lsrs	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3208      	adds	r2, #8
 80012ce:	69b9      	ldr	r1, [r7, #24]
 80012d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0203 	and.w	r2, r3, #3
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80a2 	beq.w	800145a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b57      	ldr	r3, [pc, #348]	@ (8001478 <HAL_GPIO_Init+0x2e8>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131e:	4a56      	ldr	r2, [pc, #344]	@ (8001478 <HAL_GPIO_Init+0x2e8>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001324:	6453      	str	r3, [r2, #68]	@ 0x44
 8001326:	4b54      	ldr	r3, [pc, #336]	@ (8001478 <HAL_GPIO_Init+0x2e8>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001332:	4a52      	ldr	r2, [pc, #328]	@ (800147c <HAL_GPIO_Init+0x2ec>)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	220f      	movs	r2, #15
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a49      	ldr	r2, [pc, #292]	@ (8001480 <HAL_GPIO_Init+0x2f0>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d019      	beq.n	8001392 <HAL_GPIO_Init+0x202>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a48      	ldr	r2, [pc, #288]	@ (8001484 <HAL_GPIO_Init+0x2f4>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d013      	beq.n	800138e <HAL_GPIO_Init+0x1fe>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a47      	ldr	r2, [pc, #284]	@ (8001488 <HAL_GPIO_Init+0x2f8>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d00d      	beq.n	800138a <HAL_GPIO_Init+0x1fa>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a46      	ldr	r2, [pc, #280]	@ (800148c <HAL_GPIO_Init+0x2fc>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d007      	beq.n	8001386 <HAL_GPIO_Init+0x1f6>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a45      	ldr	r2, [pc, #276]	@ (8001490 <HAL_GPIO_Init+0x300>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d101      	bne.n	8001382 <HAL_GPIO_Init+0x1f2>
 800137e:	2304      	movs	r3, #4
 8001380:	e008      	b.n	8001394 <HAL_GPIO_Init+0x204>
 8001382:	2307      	movs	r3, #7
 8001384:	e006      	b.n	8001394 <HAL_GPIO_Init+0x204>
 8001386:	2303      	movs	r3, #3
 8001388:	e004      	b.n	8001394 <HAL_GPIO_Init+0x204>
 800138a:	2302      	movs	r3, #2
 800138c:	e002      	b.n	8001394 <HAL_GPIO_Init+0x204>
 800138e:	2301      	movs	r3, #1
 8001390:	e000      	b.n	8001394 <HAL_GPIO_Init+0x204>
 8001392:	2300      	movs	r3, #0
 8001394:	69fa      	ldr	r2, [r7, #28]
 8001396:	f002 0203 	and.w	r2, r2, #3
 800139a:	0092      	lsls	r2, r2, #2
 800139c:	4093      	lsls	r3, r2
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a4:	4935      	ldr	r1, [pc, #212]	@ (800147c <HAL_GPIO_Init+0x2ec>)
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	3302      	adds	r3, #2
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b2:	4b38      	ldr	r3, [pc, #224]	@ (8001494 <HAL_GPIO_Init+0x304>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013d6:	4a2f      	ldr	r2, [pc, #188]	@ (8001494 <HAL_GPIO_Init+0x304>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001494 <HAL_GPIO_Init+0x304>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001400:	4a24      	ldr	r2, [pc, #144]	@ (8001494 <HAL_GPIO_Init+0x304>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001406:	4b23      	ldr	r3, [pc, #140]	@ (8001494 <HAL_GPIO_Init+0x304>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800142a:	4a1a      	ldr	r2, [pc, #104]	@ (8001494 <HAL_GPIO_Init+0x304>)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001430:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <HAL_GPIO_Init+0x304>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001454:	4a0f      	ldr	r2, [pc, #60]	@ (8001494 <HAL_GPIO_Init+0x304>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3301      	adds	r3, #1
 800145e:	61fb      	str	r3, [r7, #28]
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	2b0f      	cmp	r3, #15
 8001464:	f67f aea2 	bls.w	80011ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3724      	adds	r7, #36	@ 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800
 800147c:	40013800 	.word	0x40013800
 8001480:	40020000 	.word	0x40020000
 8001484:	40020400 	.word	0x40020400
 8001488:	40020800 	.word	0x40020800
 800148c:	40020c00 	.word	0x40020c00
 8001490:	40021000 	.word	0x40021000
 8001494:	40013c00 	.word	0x40013c00

08001498 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	691a      	ldr	r2, [r3, #16]
 80014a8:	887b      	ldrh	r3, [r7, #2]
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d002      	beq.n	80014b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014b0:	2301      	movs	r3, #1
 80014b2:	73fb      	strb	r3, [r7, #15]
 80014b4:	e001      	b.n	80014ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014b6:	2300      	movs	r3, #0
 80014b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]
 80014d4:	4613      	mov	r3, r2
 80014d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d8:	787b      	ldrb	r3, [r7, #1]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014e4:	e003      	b.n	80014ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	041a      	lsls	r2, r3, #16
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	619a      	str	r2, [r3, #24]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
	...

080014fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e267      	b.n	80019de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d075      	beq.n	8001606 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800151a:	4b88      	ldr	r3, [pc, #544]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	2b04      	cmp	r3, #4
 8001524:	d00c      	beq.n	8001540 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001526:	4b85      	ldr	r3, [pc, #532]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800152e:	2b08      	cmp	r3, #8
 8001530:	d112      	bne.n	8001558 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001532:	4b82      	ldr	r3, [pc, #520]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800153a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800153e:	d10b      	bne.n	8001558 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001540:	4b7e      	ldr	r3, [pc, #504]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d05b      	beq.n	8001604 <HAL_RCC_OscConfig+0x108>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d157      	bne.n	8001604 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e242      	b.n	80019de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001560:	d106      	bne.n	8001570 <HAL_RCC_OscConfig+0x74>
 8001562:	4b76      	ldr	r3, [pc, #472]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a75      	ldr	r2, [pc, #468]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 8001568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	e01d      	b.n	80015ac <HAL_RCC_OscConfig+0xb0>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001578:	d10c      	bne.n	8001594 <HAL_RCC_OscConfig+0x98>
 800157a:	4b70      	ldr	r3, [pc, #448]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a6f      	ldr	r2, [pc, #444]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 8001580:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	4b6d      	ldr	r3, [pc, #436]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a6c      	ldr	r2, [pc, #432]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 800158c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	e00b      	b.n	80015ac <HAL_RCC_OscConfig+0xb0>
 8001594:	4b69      	ldr	r3, [pc, #420]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a68      	ldr	r2, [pc, #416]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 800159a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	4b66      	ldr	r3, [pc, #408]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a65      	ldr	r2, [pc, #404]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 80015a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d013      	beq.n	80015dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fcd6 	bl	8000f64 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015bc:	f7ff fcd2 	bl	8000f64 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b64      	cmp	r3, #100	@ 0x64
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e207      	b.n	80019de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ce:	4b5b      	ldr	r3, [pc, #364]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0f0      	beq.n	80015bc <HAL_RCC_OscConfig+0xc0>
 80015da:	e014      	b.n	8001606 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff fcc2 	bl	8000f64 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015e4:	f7ff fcbe 	bl	8000f64 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b64      	cmp	r3, #100	@ 0x64
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e1f3      	b.n	80019de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f6:	4b51      	ldr	r3, [pc, #324]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0xe8>
 8001602:	e000      	b.n	8001606 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d063      	beq.n	80016da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001612:	4b4a      	ldr	r3, [pc, #296]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 030c 	and.w	r3, r3, #12
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00b      	beq.n	8001636 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800161e:	4b47      	ldr	r3, [pc, #284]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001626:	2b08      	cmp	r3, #8
 8001628:	d11c      	bne.n	8001664 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800162a:	4b44      	ldr	r3, [pc, #272]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d116      	bne.n	8001664 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001636:	4b41      	ldr	r3, [pc, #260]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d005      	beq.n	800164e <HAL_RCC_OscConfig+0x152>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d001      	beq.n	800164e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e1c7      	b.n	80019de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164e:	4b3b      	ldr	r3, [pc, #236]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	4937      	ldr	r1, [pc, #220]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 800165e:	4313      	orrs	r3, r2
 8001660:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001662:	e03a      	b.n	80016da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d020      	beq.n	80016ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800166c:	4b34      	ldr	r3, [pc, #208]	@ (8001740 <HAL_RCC_OscConfig+0x244>)
 800166e:	2201      	movs	r2, #1
 8001670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001672:	f7ff fc77 	bl	8000f64 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800167a:	f7ff fc73 	bl	8000f64 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e1a8      	b.n	80019de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800168c:	4b2b      	ldr	r3, [pc, #172]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0f0      	beq.n	800167a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001698:	4b28      	ldr	r3, [pc, #160]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	4925      	ldr	r1, [pc, #148]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	600b      	str	r3, [r1, #0]
 80016ac:	e015      	b.n	80016da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ae:	4b24      	ldr	r3, [pc, #144]	@ (8001740 <HAL_RCC_OscConfig+0x244>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b4:	f7ff fc56 	bl	8000f64 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016bc:	f7ff fc52 	bl	8000f64 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e187      	b.n	80019de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ce:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d036      	beq.n	8001754 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d016      	beq.n	800171c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <HAL_RCC_OscConfig+0x248>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f4:	f7ff fc36 	bl	8000f64 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016fc:	f7ff fc32 	bl	8000f64 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e167      	b.n	80019de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800170e:	4b0b      	ldr	r3, [pc, #44]	@ (800173c <HAL_RCC_OscConfig+0x240>)
 8001710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f0      	beq.n	80016fc <HAL_RCC_OscConfig+0x200>
 800171a:	e01b      	b.n	8001754 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800171c:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <HAL_RCC_OscConfig+0x248>)
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001722:	f7ff fc1f 	bl	8000f64 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001728:	e00e      	b.n	8001748 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800172a:	f7ff fc1b 	bl	8000f64 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d907      	bls.n	8001748 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e150      	b.n	80019de <HAL_RCC_OscConfig+0x4e2>
 800173c:	40023800 	.word	0x40023800
 8001740:	42470000 	.word	0x42470000
 8001744:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001748:	4b88      	ldr	r3, [pc, #544]	@ (800196c <HAL_RCC_OscConfig+0x470>)
 800174a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1ea      	bne.n	800172a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 8097 	beq.w	8001890 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001766:	4b81      	ldr	r3, [pc, #516]	@ (800196c <HAL_RCC_OscConfig+0x470>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10f      	bne.n	8001792 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	4b7d      	ldr	r3, [pc, #500]	@ (800196c <HAL_RCC_OscConfig+0x470>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	4a7c      	ldr	r2, [pc, #496]	@ (800196c <HAL_RCC_OscConfig+0x470>)
 800177c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001780:	6413      	str	r3, [r2, #64]	@ 0x40
 8001782:	4b7a      	ldr	r3, [pc, #488]	@ (800196c <HAL_RCC_OscConfig+0x470>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800178e:	2301      	movs	r3, #1
 8001790:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001792:	4b77      	ldr	r3, [pc, #476]	@ (8001970 <HAL_RCC_OscConfig+0x474>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179a:	2b00      	cmp	r3, #0
 800179c:	d118      	bne.n	80017d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800179e:	4b74      	ldr	r3, [pc, #464]	@ (8001970 <HAL_RCC_OscConfig+0x474>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a73      	ldr	r2, [pc, #460]	@ (8001970 <HAL_RCC_OscConfig+0x474>)
 80017a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017aa:	f7ff fbdb 	bl	8000f64 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b2:	f7ff fbd7 	bl	8000f64 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e10c      	b.n	80019de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001970 <HAL_RCC_OscConfig+0x474>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d106      	bne.n	80017e6 <HAL_RCC_OscConfig+0x2ea>
 80017d8:	4b64      	ldr	r3, [pc, #400]	@ (800196c <HAL_RCC_OscConfig+0x470>)
 80017da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017dc:	4a63      	ldr	r2, [pc, #396]	@ (800196c <HAL_RCC_OscConfig+0x470>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80017e4:	e01c      	b.n	8001820 <HAL_RCC_OscConfig+0x324>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b05      	cmp	r3, #5
 80017ec:	d10c      	bne.n	8001808 <HAL_RCC_OscConfig+0x30c>
 80017ee:	4b5f      	ldr	r3, [pc, #380]	@ (800196c <HAL_RCC_OscConfig+0x470>)
 80017f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f2:	4a5e      	ldr	r2, [pc, #376]	@ (800196c <HAL_RCC_OscConfig+0x470>)
 80017f4:	f043 0304 	orr.w	r3, r3, #4
 80017f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80017fa:	4b5c      	ldr	r3, [pc, #368]	@ (800196c <HAL_RCC_OscConfig+0x470>)
 80017fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017fe:	4a5b      	ldr	r2, [pc, #364]	@ (800196c <HAL_RCC_OscConfig+0x470>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6713      	str	r3, [r2, #112]	@ 0x70
 8001806:	e00b      	b.n	8001820 <HAL_RCC_OscConfig+0x324>
 8001808:	4b58      	ldr	r3, [pc, #352]	@ (800196c <HAL_RCC_OscConfig+0x470>)
 800180a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800180c:	4a57      	ldr	r2, [pc, #348]	@ (800196c <HAL_RCC_OscConfig+0x470>)
 800180e:	f023 0301 	bic.w	r3, r3, #1
 8001812:	6713      	str	r3, [r2, #112]	@ 0x70
 8001814:	4b55      	ldr	r3, [pc, #340]	@ (800196c <HAL_RCC_OscConfig+0x470>)
 8001816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001818:	4a54      	ldr	r2, [pc, #336]	@ (800196c <HAL_RCC_OscConfig+0x470>)
 800181a:	f023 0304 	bic.w	r3, r3, #4
 800181e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d015      	beq.n	8001854 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001828:	f7ff fb9c 	bl	8000f64 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800182e:	e00a      	b.n	8001846 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001830:	f7ff fb98 	bl	8000f64 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800183e:	4293      	cmp	r3, r2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e0cb      	b.n	80019de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001846:	4b49      	ldr	r3, [pc, #292]	@ (800196c <HAL_RCC_OscConfig+0x470>)
 8001848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0ee      	beq.n	8001830 <HAL_RCC_OscConfig+0x334>
 8001852:	e014      	b.n	800187e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001854:	f7ff fb86 	bl	8000f64 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800185a:	e00a      	b.n	8001872 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800185c:	f7ff fb82 	bl	8000f64 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e0b5      	b.n	80019de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001872:	4b3e      	ldr	r3, [pc, #248]	@ (800196c <HAL_RCC_OscConfig+0x470>)
 8001874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1ee      	bne.n	800185c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800187e:	7dfb      	ldrb	r3, [r7, #23]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d105      	bne.n	8001890 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001884:	4b39      	ldr	r3, [pc, #228]	@ (800196c <HAL_RCC_OscConfig+0x470>)
 8001886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001888:	4a38      	ldr	r2, [pc, #224]	@ (800196c <HAL_RCC_OscConfig+0x470>)
 800188a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800188e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80a1 	beq.w	80019dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800189a:	4b34      	ldr	r3, [pc, #208]	@ (800196c <HAL_RCC_OscConfig+0x470>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 030c 	and.w	r3, r3, #12
 80018a2:	2b08      	cmp	r3, #8
 80018a4:	d05c      	beq.n	8001960 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d141      	bne.n	8001932 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ae:	4b31      	ldr	r3, [pc, #196]	@ (8001974 <HAL_RCC_OscConfig+0x478>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7ff fb56 	bl	8000f64 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018bc:	f7ff fb52 	bl	8000f64 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e087      	b.n	80019de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ce:	4b27      	ldr	r3, [pc, #156]	@ (800196c <HAL_RCC_OscConfig+0x470>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69da      	ldr	r2, [r3, #28]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e8:	019b      	lsls	r3, r3, #6
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f0:	085b      	lsrs	r3, r3, #1
 80018f2:	3b01      	subs	r3, #1
 80018f4:	041b      	lsls	r3, r3, #16
 80018f6:	431a      	orrs	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fc:	061b      	lsls	r3, r3, #24
 80018fe:	491b      	ldr	r1, [pc, #108]	@ (800196c <HAL_RCC_OscConfig+0x470>)
 8001900:	4313      	orrs	r3, r2
 8001902:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001904:	4b1b      	ldr	r3, [pc, #108]	@ (8001974 <HAL_RCC_OscConfig+0x478>)
 8001906:	2201      	movs	r2, #1
 8001908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190a:	f7ff fb2b 	bl	8000f64 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001912:	f7ff fb27 	bl	8000f64 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e05c      	b.n	80019de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001924:	4b11      	ldr	r3, [pc, #68]	@ (800196c <HAL_RCC_OscConfig+0x470>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x416>
 8001930:	e054      	b.n	80019dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001932:	4b10      	ldr	r3, [pc, #64]	@ (8001974 <HAL_RCC_OscConfig+0x478>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001938:	f7ff fb14 	bl	8000f64 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001940:	f7ff fb10 	bl	8000f64 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e045      	b.n	80019de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001952:	4b06      	ldr	r3, [pc, #24]	@ (800196c <HAL_RCC_OscConfig+0x470>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x444>
 800195e:	e03d      	b.n	80019dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d107      	bne.n	8001978 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e038      	b.n	80019de <HAL_RCC_OscConfig+0x4e2>
 800196c:	40023800 	.word	0x40023800
 8001970:	40007000 	.word	0x40007000
 8001974:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001978:	4b1b      	ldr	r3, [pc, #108]	@ (80019e8 <HAL_RCC_OscConfig+0x4ec>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d028      	beq.n	80019d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001990:	429a      	cmp	r2, r3
 8001992:	d121      	bne.n	80019d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199e:	429a      	cmp	r2, r3
 80019a0:	d11a      	bne.n	80019d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019a8:	4013      	ands	r3, r2
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d111      	bne.n	80019d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019be:	085b      	lsrs	r3, r3, #1
 80019c0:	3b01      	subs	r3, #1
 80019c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d107      	bne.n	80019d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d001      	beq.n	80019dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800

080019ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0cc      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a00:	4b68      	ldr	r3, [pc, #416]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d90c      	bls.n	8001a28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0e:	4b65      	ldr	r3, [pc, #404]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a16:	4b63      	ldr	r3, [pc, #396]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d001      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e0b8      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d020      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a40:	4b59      	ldr	r3, [pc, #356]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	4a58      	ldr	r2, [pc, #352]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a58:	4b53      	ldr	r3, [pc, #332]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	4a52      	ldr	r2, [pc, #328]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a64:	4b50      	ldr	r3, [pc, #320]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	494d      	ldr	r1, [pc, #308]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d044      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d107      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8a:	4b47      	ldr	r3, [pc, #284]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d119      	bne.n	8001aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e07f      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d003      	beq.n	8001aaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d107      	bne.n	8001aba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aaa:	4b3f      	ldr	r3, [pc, #252]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d109      	bne.n	8001aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e06f      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aba:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e067      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aca:	4b37      	ldr	r3, [pc, #220]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f023 0203 	bic.w	r2, r3, #3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	4934      	ldr	r1, [pc, #208]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001adc:	f7ff fa42 	bl	8000f64 <HAL_GetTick>
 8001ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae2:	e00a      	b.n	8001afa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae4:	f7ff fa3e 	bl	8000f64 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e04f      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afa:	4b2b      	ldr	r3, [pc, #172]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 020c 	and.w	r2, r3, #12
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d1eb      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b0c:	4b25      	ldr	r3, [pc, #148]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d20c      	bcs.n	8001b34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1a:	4b22      	ldr	r3, [pc, #136]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b22:	4b20      	ldr	r3, [pc, #128]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d001      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e032      	b.n	8001b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d008      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b40:	4b19      	ldr	r3, [pc, #100]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	4916      	ldr	r1, [pc, #88]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d009      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b5e:	4b12      	ldr	r3, [pc, #72]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	490e      	ldr	r1, [pc, #56]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b72:	f000 f821 	bl	8001bb8 <HAL_RCC_GetSysClockFreq>
 8001b76:	4602      	mov	r2, r0
 8001b78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	091b      	lsrs	r3, r3, #4
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	490a      	ldr	r1, [pc, #40]	@ (8001bac <HAL_RCC_ClockConfig+0x1c0>)
 8001b84:	5ccb      	ldrb	r3, [r1, r3]
 8001b86:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8a:	4a09      	ldr	r2, [pc, #36]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b8e:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff f9a2 	bl	8000edc <HAL_InitTick>

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40023c00 	.word	0x40023c00
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	0800369c 	.word	0x0800369c
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	20000004 	.word	0x20000004

08001bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bbc:	b094      	sub	sp, #80	@ 0x50
 8001bbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bc8:	2300      	movs	r3, #0
 8001bca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bd0:	4b79      	ldr	r3, [pc, #484]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 030c 	and.w	r3, r3, #12
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d00d      	beq.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x40>
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	f200 80e1 	bhi.w	8001da4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <HAL_RCC_GetSysClockFreq+0x34>
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d003      	beq.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bea:	e0db      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bec:	4b73      	ldr	r3, [pc, #460]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x204>)
 8001bee:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001bf0:	e0db      	b.n	8001daa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bf2:	4b73      	ldr	r3, [pc, #460]	@ (8001dc0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bf6:	e0d8      	b.n	8001daa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bf8:	4b6f      	ldr	r3, [pc, #444]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c00:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c02:	4b6d      	ldr	r3, [pc, #436]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d063      	beq.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c0e:	4b6a      	ldr	r3, [pc, #424]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	099b      	lsrs	r3, r3, #6
 8001c14:	2200      	movs	r2, #0
 8001c16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c18:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c20:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c22:	2300      	movs	r3, #0
 8001c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c2a:	4622      	mov	r2, r4
 8001c2c:	462b      	mov	r3, r5
 8001c2e:	f04f 0000 	mov.w	r0, #0
 8001c32:	f04f 0100 	mov.w	r1, #0
 8001c36:	0159      	lsls	r1, r3, #5
 8001c38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c3c:	0150      	lsls	r0, r2, #5
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4621      	mov	r1, r4
 8001c44:	1a51      	subs	r1, r2, r1
 8001c46:	6139      	str	r1, [r7, #16]
 8001c48:	4629      	mov	r1, r5
 8001c4a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c5c:	4659      	mov	r1, fp
 8001c5e:	018b      	lsls	r3, r1, #6
 8001c60:	4651      	mov	r1, sl
 8001c62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c66:	4651      	mov	r1, sl
 8001c68:	018a      	lsls	r2, r1, #6
 8001c6a:	4651      	mov	r1, sl
 8001c6c:	ebb2 0801 	subs.w	r8, r2, r1
 8001c70:	4659      	mov	r1, fp
 8001c72:	eb63 0901 	sbc.w	r9, r3, r1
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c8a:	4690      	mov	r8, r2
 8001c8c:	4699      	mov	r9, r3
 8001c8e:	4623      	mov	r3, r4
 8001c90:	eb18 0303 	adds.w	r3, r8, r3
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	462b      	mov	r3, r5
 8001c98:	eb49 0303 	adc.w	r3, r9, r3
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001caa:	4629      	mov	r1, r5
 8001cac:	024b      	lsls	r3, r1, #9
 8001cae:	4621      	mov	r1, r4
 8001cb0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cb4:	4621      	mov	r1, r4
 8001cb6:	024a      	lsls	r2, r1, #9
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001cc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001cc8:	f7fe fada 	bl	8000280 <__aeabi_uldivmod>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cd4:	e058      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd6:	4b38      	ldr	r3, [pc, #224]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	099b      	lsrs	r3, r3, #6
 8001cdc:	2200      	movs	r2, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ce6:	623b      	str	r3, [r7, #32]
 8001ce8:	2300      	movs	r3, #0
 8001cea:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cf0:	4642      	mov	r2, r8
 8001cf2:	464b      	mov	r3, r9
 8001cf4:	f04f 0000 	mov.w	r0, #0
 8001cf8:	f04f 0100 	mov.w	r1, #0
 8001cfc:	0159      	lsls	r1, r3, #5
 8001cfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d02:	0150      	lsls	r0, r2, #5
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4641      	mov	r1, r8
 8001d0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d0e:	4649      	mov	r1, r9
 8001d10:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d28:	ebb2 040a 	subs.w	r4, r2, sl
 8001d2c:	eb63 050b 	sbc.w	r5, r3, fp
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	00eb      	lsls	r3, r5, #3
 8001d3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d3e:	00e2      	lsls	r2, r4, #3
 8001d40:	4614      	mov	r4, r2
 8001d42:	461d      	mov	r5, r3
 8001d44:	4643      	mov	r3, r8
 8001d46:	18e3      	adds	r3, r4, r3
 8001d48:	603b      	str	r3, [r7, #0]
 8001d4a:	464b      	mov	r3, r9
 8001d4c:	eb45 0303 	adc.w	r3, r5, r3
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d5e:	4629      	mov	r1, r5
 8001d60:	028b      	lsls	r3, r1, #10
 8001d62:	4621      	mov	r1, r4
 8001d64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d68:	4621      	mov	r1, r4
 8001d6a:	028a      	lsls	r2, r1, #10
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d72:	2200      	movs	r2, #0
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	61fa      	str	r2, [r7, #28]
 8001d78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d7c:	f7fe fa80 	bl	8000280 <__aeabi_uldivmod>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4613      	mov	r3, r2
 8001d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d88:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	0c1b      	lsrs	r3, r3, #16
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	3301      	adds	r3, #1
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001d98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001da2:	e002      	b.n	8001daa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001da4:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x204>)
 8001da6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3750      	adds	r7, #80	@ 0x50
 8001db0:	46bd      	mov	sp, r7
 8001db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	00f42400 	.word	0x00f42400
 8001dc0:	007a1200 	.word	0x007a1200

08001dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dc8:	4b03      	ldr	r3, [pc, #12]	@ (8001dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dca:	681b      	ldr	r3, [r3, #0]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20000000 	.word	0x20000000

08001ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001de0:	f7ff fff0 	bl	8001dc4 <HAL_RCC_GetHCLKFreq>
 8001de4:	4602      	mov	r2, r0
 8001de6:	4b05      	ldr	r3, [pc, #20]	@ (8001dfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	0a9b      	lsrs	r3, r3, #10
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	4903      	ldr	r1, [pc, #12]	@ (8001e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001df2:	5ccb      	ldrb	r3, [r1, r3]
 8001df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	080036ac 	.word	0x080036ac

08001e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e08:	f7ff ffdc 	bl	8001dc4 <HAL_RCC_GetHCLKFreq>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	4b05      	ldr	r3, [pc, #20]	@ (8001e24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	0b5b      	lsrs	r3, r3, #13
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	4903      	ldr	r1, [pc, #12]	@ (8001e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e1a:	5ccb      	ldrb	r3, [r1, r3]
 8001e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40023800 	.word	0x40023800
 8001e28:	080036ac 	.word	0x080036ac

08001e2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e041      	b.n	8001ec2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d106      	bne.n	8001e58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7fe fec4 	bl	8000be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3304      	adds	r3, #4
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	f000 f82e 	bl	8001ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a3a      	ldr	r2, [pc, #232]	@ (8001fc8 <TIM_Base_SetConfig+0xfc>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d00f      	beq.n	8001f04 <TIM_Base_SetConfig+0x38>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eea:	d00b      	beq.n	8001f04 <TIM_Base_SetConfig+0x38>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a37      	ldr	r2, [pc, #220]	@ (8001fcc <TIM_Base_SetConfig+0x100>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d007      	beq.n	8001f04 <TIM_Base_SetConfig+0x38>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a36      	ldr	r2, [pc, #216]	@ (8001fd0 <TIM_Base_SetConfig+0x104>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d003      	beq.n	8001f04 <TIM_Base_SetConfig+0x38>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a35      	ldr	r2, [pc, #212]	@ (8001fd4 <TIM_Base_SetConfig+0x108>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d108      	bne.n	8001f16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a2b      	ldr	r2, [pc, #172]	@ (8001fc8 <TIM_Base_SetConfig+0xfc>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d01b      	beq.n	8001f56 <TIM_Base_SetConfig+0x8a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f24:	d017      	beq.n	8001f56 <TIM_Base_SetConfig+0x8a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a28      	ldr	r2, [pc, #160]	@ (8001fcc <TIM_Base_SetConfig+0x100>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d013      	beq.n	8001f56 <TIM_Base_SetConfig+0x8a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a27      	ldr	r2, [pc, #156]	@ (8001fd0 <TIM_Base_SetConfig+0x104>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00f      	beq.n	8001f56 <TIM_Base_SetConfig+0x8a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a26      	ldr	r2, [pc, #152]	@ (8001fd4 <TIM_Base_SetConfig+0x108>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00b      	beq.n	8001f56 <TIM_Base_SetConfig+0x8a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a25      	ldr	r2, [pc, #148]	@ (8001fd8 <TIM_Base_SetConfig+0x10c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d007      	beq.n	8001f56 <TIM_Base_SetConfig+0x8a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a24      	ldr	r2, [pc, #144]	@ (8001fdc <TIM_Base_SetConfig+0x110>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d003      	beq.n	8001f56 <TIM_Base_SetConfig+0x8a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a23      	ldr	r2, [pc, #140]	@ (8001fe0 <TIM_Base_SetConfig+0x114>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d108      	bne.n	8001f68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a0e      	ldr	r2, [pc, #56]	@ (8001fc8 <TIM_Base_SetConfig+0xfc>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d103      	bne.n	8001f9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d105      	bne.n	8001fba <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f023 0201 	bic.w	r2, r3, #1
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	611a      	str	r2, [r3, #16]
  }
}
 8001fba:	bf00      	nop
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40010000 	.word	0x40010000
 8001fcc:	40000400 	.word	0x40000400
 8001fd0:	40000800 	.word	0x40000800
 8001fd4:	40000c00 	.word	0x40000c00
 8001fd8:	40014000 	.word	0x40014000
 8001fdc:	40014400 	.word	0x40014400
 8001fe0:	40014800 	.word	0x40014800

08001fe4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e042      	b.n	800207c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d106      	bne.n	8002010 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe fe0a 	bl	8000c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2224      	movs	r2, #36	@ 0x24
 8002014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002026:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f973 	bl	8002314 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800203c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695a      	ldr	r2, [r3, #20]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800204c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800205c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	@ 0x28
 8002088:	af02      	add	r7, sp, #8
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	4613      	mov	r3, r2
 8002092:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	d175      	bne.n	8002190 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <HAL_UART_Transmit+0x2c>
 80020aa:	88fb      	ldrh	r3, [r7, #6]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e06e      	b.n	8002192 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2221      	movs	r2, #33	@ 0x21
 80020be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020c2:	f7fe ff4f 	bl	8000f64 <HAL_GetTick>
 80020c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	88fa      	ldrh	r2, [r7, #6]
 80020cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	88fa      	ldrh	r2, [r7, #6]
 80020d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020dc:	d108      	bne.n	80020f0 <HAL_UART_Transmit+0x6c>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d104      	bne.n	80020f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	61bb      	str	r3, [r7, #24]
 80020ee:	e003      	b.n	80020f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020f8:	e02e      	b.n	8002158 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2200      	movs	r2, #0
 8002102:	2180      	movs	r1, #128	@ 0x80
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f000 f848 	bl	800219a <UART_WaitOnFlagUntilTimeout>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e03a      	b.n	8002192 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10b      	bne.n	800213a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002130:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	3302      	adds	r3, #2
 8002136:	61bb      	str	r3, [r7, #24]
 8002138:	e007      	b.n	800214a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	781a      	ldrb	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	3301      	adds	r3, #1
 8002148:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800214e:	b29b      	uxth	r3, r3
 8002150:	3b01      	subs	r3, #1
 8002152:	b29a      	uxth	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800215c:	b29b      	uxth	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1cb      	bne.n	80020fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2200      	movs	r2, #0
 800216a:	2140      	movs	r1, #64	@ 0x40
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 f814 	bl	800219a <UART_WaitOnFlagUntilTimeout>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2220      	movs	r2, #32
 800217c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e006      	b.n	8002192 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2220      	movs	r2, #32
 8002188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	e000      	b.n	8002192 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002190:	2302      	movs	r3, #2
  }
}
 8002192:	4618      	mov	r0, r3
 8002194:	3720      	adds	r7, #32
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	4613      	mov	r3, r2
 80021a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021aa:	e03b      	b.n	8002224 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ac:	6a3b      	ldr	r3, [r7, #32]
 80021ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b2:	d037      	beq.n	8002224 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b4:	f7fe fed6 	bl	8000f64 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	6a3a      	ldr	r2, [r7, #32]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d302      	bcc.n	80021ca <UART_WaitOnFlagUntilTimeout+0x30>
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e03a      	b.n	8002244 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d023      	beq.n	8002224 <UART_WaitOnFlagUntilTimeout+0x8a>
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b80      	cmp	r3, #128	@ 0x80
 80021e0:	d020      	beq.n	8002224 <UART_WaitOnFlagUntilTimeout+0x8a>
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b40      	cmp	r3, #64	@ 0x40
 80021e6:	d01d      	beq.n	8002224 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d116      	bne.n	8002224 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 f81d 	bl	800224c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2208      	movs	r2, #8
 8002216:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e00f      	b.n	8002244 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	4013      	ands	r3, r2
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	429a      	cmp	r2, r3
 8002232:	bf0c      	ite	eq
 8002234:	2301      	moveq	r3, #1
 8002236:	2300      	movne	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	461a      	mov	r2, r3
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	429a      	cmp	r2, r3
 8002240:	d0b4      	beq.n	80021ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800224c:	b480      	push	{r7}
 800224e:	b095      	sub	sp, #84	@ 0x54
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	330c      	adds	r3, #12
 800225a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800225c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800225e:	e853 3f00 	ldrex	r3, [r3]
 8002262:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002266:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800226a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	330c      	adds	r3, #12
 8002272:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002274:	643a      	str	r2, [r7, #64]	@ 0x40
 8002276:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002278:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800227a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800227c:	e841 2300 	strex	r3, r2, [r1]
 8002280:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1e5      	bne.n	8002254 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	3314      	adds	r3, #20
 800228e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	e853 3f00 	ldrex	r3, [r3]
 8002296:	61fb      	str	r3, [r7, #28]
   return(result);
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f023 0301 	bic.w	r3, r3, #1
 800229e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	3314      	adds	r3, #20
 80022a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022b0:	e841 2300 	strex	r3, r2, [r1]
 80022b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80022b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1e5      	bne.n	8002288 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d119      	bne.n	80022f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	330c      	adds	r3, #12
 80022ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	e853 3f00 	ldrex	r3, [r3]
 80022d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f023 0310 	bic.w	r3, r3, #16
 80022da:	647b      	str	r3, [r7, #68]	@ 0x44
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	330c      	adds	r3, #12
 80022e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80022e4:	61ba      	str	r2, [r7, #24]
 80022e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e8:	6979      	ldr	r1, [r7, #20]
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	e841 2300 	strex	r3, r2, [r1]
 80022f0:	613b      	str	r3, [r7, #16]
   return(result);
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1e5      	bne.n	80022c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2220      	movs	r2, #32
 80022fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002306:	bf00      	nop
 8002308:	3754      	adds	r7, #84	@ 0x54
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002318:	b0c0      	sub	sp, #256	@ 0x100
 800231a:	af00      	add	r7, sp, #0
 800231c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800232c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002330:	68d9      	ldr	r1, [r3, #12]
 8002332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	ea40 0301 	orr.w	r3, r0, r1
 800233c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800233e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	431a      	orrs	r2, r3
 800234c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	431a      	orrs	r2, r3
 8002354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800236c:	f021 010c 	bic.w	r1, r1, #12
 8002370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800237a:	430b      	orrs	r3, r1
 800237c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800237e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800238a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800238e:	6999      	ldr	r1, [r3, #24]
 8002390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	ea40 0301 	orr.w	r3, r0, r1
 800239a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800239c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	4b8f      	ldr	r3, [pc, #572]	@ (80025e0 <UART_SetConfig+0x2cc>)
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d005      	beq.n	80023b4 <UART_SetConfig+0xa0>
 80023a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	4b8d      	ldr	r3, [pc, #564]	@ (80025e4 <UART_SetConfig+0x2d0>)
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d104      	bne.n	80023be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023b4:	f7ff fd26 	bl	8001e04 <HAL_RCC_GetPCLK2Freq>
 80023b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80023bc:	e003      	b.n	80023c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023be:	f7ff fd0d 	bl	8001ddc <HAL_RCC_GetPCLK1Freq>
 80023c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023d0:	f040 810c 	bne.w	80025ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023d8:	2200      	movs	r2, #0
 80023da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80023de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80023e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80023e6:	4622      	mov	r2, r4
 80023e8:	462b      	mov	r3, r5
 80023ea:	1891      	adds	r1, r2, r2
 80023ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80023ee:	415b      	adcs	r3, r3
 80023f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80023f6:	4621      	mov	r1, r4
 80023f8:	eb12 0801 	adds.w	r8, r2, r1
 80023fc:	4629      	mov	r1, r5
 80023fe:	eb43 0901 	adc.w	r9, r3, r1
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	f04f 0300 	mov.w	r3, #0
 800240a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800240e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002412:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002416:	4690      	mov	r8, r2
 8002418:	4699      	mov	r9, r3
 800241a:	4623      	mov	r3, r4
 800241c:	eb18 0303 	adds.w	r3, r8, r3
 8002420:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002424:	462b      	mov	r3, r5
 8002426:	eb49 0303 	adc.w	r3, r9, r3
 800242a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800242e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800243a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800243e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002442:	460b      	mov	r3, r1
 8002444:	18db      	adds	r3, r3, r3
 8002446:	653b      	str	r3, [r7, #80]	@ 0x50
 8002448:	4613      	mov	r3, r2
 800244a:	eb42 0303 	adc.w	r3, r2, r3
 800244e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002450:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002454:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002458:	f7fd ff12 	bl	8000280 <__aeabi_uldivmod>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4b61      	ldr	r3, [pc, #388]	@ (80025e8 <UART_SetConfig+0x2d4>)
 8002462:	fba3 2302 	umull	r2, r3, r3, r2
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	011c      	lsls	r4, r3, #4
 800246a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800246e:	2200      	movs	r2, #0
 8002470:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002474:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002478:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800247c:	4642      	mov	r2, r8
 800247e:	464b      	mov	r3, r9
 8002480:	1891      	adds	r1, r2, r2
 8002482:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002484:	415b      	adcs	r3, r3
 8002486:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002488:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800248c:	4641      	mov	r1, r8
 800248e:	eb12 0a01 	adds.w	sl, r2, r1
 8002492:	4649      	mov	r1, r9
 8002494:	eb43 0b01 	adc.w	fp, r3, r1
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024ac:	4692      	mov	sl, r2
 80024ae:	469b      	mov	fp, r3
 80024b0:	4643      	mov	r3, r8
 80024b2:	eb1a 0303 	adds.w	r3, sl, r3
 80024b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80024ba:	464b      	mov	r3, r9
 80024bc:	eb4b 0303 	adc.w	r3, fp, r3
 80024c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80024c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80024d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80024d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80024d8:	460b      	mov	r3, r1
 80024da:	18db      	adds	r3, r3, r3
 80024dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80024de:	4613      	mov	r3, r2
 80024e0:	eb42 0303 	adc.w	r3, r2, r3
 80024e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80024e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80024ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80024ee:	f7fd fec7 	bl	8000280 <__aeabi_uldivmod>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	4611      	mov	r1, r2
 80024f8:	4b3b      	ldr	r3, [pc, #236]	@ (80025e8 <UART_SetConfig+0x2d4>)
 80024fa:	fba3 2301 	umull	r2, r3, r3, r1
 80024fe:	095b      	lsrs	r3, r3, #5
 8002500:	2264      	movs	r2, #100	@ 0x64
 8002502:	fb02 f303 	mul.w	r3, r2, r3
 8002506:	1acb      	subs	r3, r1, r3
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800250e:	4b36      	ldr	r3, [pc, #216]	@ (80025e8 <UART_SetConfig+0x2d4>)
 8002510:	fba3 2302 	umull	r2, r3, r3, r2
 8002514:	095b      	lsrs	r3, r3, #5
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800251c:	441c      	add	r4, r3
 800251e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002522:	2200      	movs	r2, #0
 8002524:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002528:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800252c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002530:	4642      	mov	r2, r8
 8002532:	464b      	mov	r3, r9
 8002534:	1891      	adds	r1, r2, r2
 8002536:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002538:	415b      	adcs	r3, r3
 800253a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800253c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002540:	4641      	mov	r1, r8
 8002542:	1851      	adds	r1, r2, r1
 8002544:	6339      	str	r1, [r7, #48]	@ 0x30
 8002546:	4649      	mov	r1, r9
 8002548:	414b      	adcs	r3, r1
 800254a:	637b      	str	r3, [r7, #52]	@ 0x34
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002558:	4659      	mov	r1, fp
 800255a:	00cb      	lsls	r3, r1, #3
 800255c:	4651      	mov	r1, sl
 800255e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002562:	4651      	mov	r1, sl
 8002564:	00ca      	lsls	r2, r1, #3
 8002566:	4610      	mov	r0, r2
 8002568:	4619      	mov	r1, r3
 800256a:	4603      	mov	r3, r0
 800256c:	4642      	mov	r2, r8
 800256e:	189b      	adds	r3, r3, r2
 8002570:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002574:	464b      	mov	r3, r9
 8002576:	460a      	mov	r2, r1
 8002578:	eb42 0303 	adc.w	r3, r2, r3
 800257c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800258c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002590:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002594:	460b      	mov	r3, r1
 8002596:	18db      	adds	r3, r3, r3
 8002598:	62bb      	str	r3, [r7, #40]	@ 0x28
 800259a:	4613      	mov	r3, r2
 800259c:	eb42 0303 	adc.w	r3, r2, r3
 80025a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80025aa:	f7fd fe69 	bl	8000280 <__aeabi_uldivmod>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	4b0d      	ldr	r3, [pc, #52]	@ (80025e8 <UART_SetConfig+0x2d4>)
 80025b4:	fba3 1302 	umull	r1, r3, r3, r2
 80025b8:	095b      	lsrs	r3, r3, #5
 80025ba:	2164      	movs	r1, #100	@ 0x64
 80025bc:	fb01 f303 	mul.w	r3, r1, r3
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	3332      	adds	r3, #50	@ 0x32
 80025c6:	4a08      	ldr	r2, [pc, #32]	@ (80025e8 <UART_SetConfig+0x2d4>)
 80025c8:	fba2 2303 	umull	r2, r3, r2, r3
 80025cc:	095b      	lsrs	r3, r3, #5
 80025ce:	f003 0207 	and.w	r2, r3, #7
 80025d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4422      	add	r2, r4
 80025da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025dc:	e106      	b.n	80027ec <UART_SetConfig+0x4d8>
 80025de:	bf00      	nop
 80025e0:	40011000 	.word	0x40011000
 80025e4:	40011400 	.word	0x40011400
 80025e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025f0:	2200      	movs	r2, #0
 80025f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80025f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80025fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80025fe:	4642      	mov	r2, r8
 8002600:	464b      	mov	r3, r9
 8002602:	1891      	adds	r1, r2, r2
 8002604:	6239      	str	r1, [r7, #32]
 8002606:	415b      	adcs	r3, r3
 8002608:	627b      	str	r3, [r7, #36]	@ 0x24
 800260a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800260e:	4641      	mov	r1, r8
 8002610:	1854      	adds	r4, r2, r1
 8002612:	4649      	mov	r1, r9
 8002614:	eb43 0501 	adc.w	r5, r3, r1
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	00eb      	lsls	r3, r5, #3
 8002622:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002626:	00e2      	lsls	r2, r4, #3
 8002628:	4614      	mov	r4, r2
 800262a:	461d      	mov	r5, r3
 800262c:	4643      	mov	r3, r8
 800262e:	18e3      	adds	r3, r4, r3
 8002630:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002634:	464b      	mov	r3, r9
 8002636:	eb45 0303 	adc.w	r3, r5, r3
 800263a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800263e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800264a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	f04f 0300 	mov.w	r3, #0
 8002656:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800265a:	4629      	mov	r1, r5
 800265c:	008b      	lsls	r3, r1, #2
 800265e:	4621      	mov	r1, r4
 8002660:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002664:	4621      	mov	r1, r4
 8002666:	008a      	lsls	r2, r1, #2
 8002668:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800266c:	f7fd fe08 	bl	8000280 <__aeabi_uldivmod>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4b60      	ldr	r3, [pc, #384]	@ (80027f8 <UART_SetConfig+0x4e4>)
 8002676:	fba3 2302 	umull	r2, r3, r3, r2
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	011c      	lsls	r4, r3, #4
 800267e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002682:	2200      	movs	r2, #0
 8002684:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002688:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800268c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002690:	4642      	mov	r2, r8
 8002692:	464b      	mov	r3, r9
 8002694:	1891      	adds	r1, r2, r2
 8002696:	61b9      	str	r1, [r7, #24]
 8002698:	415b      	adcs	r3, r3
 800269a:	61fb      	str	r3, [r7, #28]
 800269c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026a0:	4641      	mov	r1, r8
 80026a2:	1851      	adds	r1, r2, r1
 80026a4:	6139      	str	r1, [r7, #16]
 80026a6:	4649      	mov	r1, r9
 80026a8:	414b      	adcs	r3, r1
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026b8:	4659      	mov	r1, fp
 80026ba:	00cb      	lsls	r3, r1, #3
 80026bc:	4651      	mov	r1, sl
 80026be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026c2:	4651      	mov	r1, sl
 80026c4:	00ca      	lsls	r2, r1, #3
 80026c6:	4610      	mov	r0, r2
 80026c8:	4619      	mov	r1, r3
 80026ca:	4603      	mov	r3, r0
 80026cc:	4642      	mov	r2, r8
 80026ce:	189b      	adds	r3, r3, r2
 80026d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80026d4:	464b      	mov	r3, r9
 80026d6:	460a      	mov	r2, r1
 80026d8:	eb42 0303 	adc.w	r3, r2, r3
 80026dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80026e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80026f8:	4649      	mov	r1, r9
 80026fa:	008b      	lsls	r3, r1, #2
 80026fc:	4641      	mov	r1, r8
 80026fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002702:	4641      	mov	r1, r8
 8002704:	008a      	lsls	r2, r1, #2
 8002706:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800270a:	f7fd fdb9 	bl	8000280 <__aeabi_uldivmod>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4611      	mov	r1, r2
 8002714:	4b38      	ldr	r3, [pc, #224]	@ (80027f8 <UART_SetConfig+0x4e4>)
 8002716:	fba3 2301 	umull	r2, r3, r3, r1
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	2264      	movs	r2, #100	@ 0x64
 800271e:	fb02 f303 	mul.w	r3, r2, r3
 8002722:	1acb      	subs	r3, r1, r3
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	3332      	adds	r3, #50	@ 0x32
 8002728:	4a33      	ldr	r2, [pc, #204]	@ (80027f8 <UART_SetConfig+0x4e4>)
 800272a:	fba2 2303 	umull	r2, r3, r2, r3
 800272e:	095b      	lsrs	r3, r3, #5
 8002730:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002734:	441c      	add	r4, r3
 8002736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800273a:	2200      	movs	r2, #0
 800273c:	673b      	str	r3, [r7, #112]	@ 0x70
 800273e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002740:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002744:	4642      	mov	r2, r8
 8002746:	464b      	mov	r3, r9
 8002748:	1891      	adds	r1, r2, r2
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	415b      	adcs	r3, r3
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002754:	4641      	mov	r1, r8
 8002756:	1851      	adds	r1, r2, r1
 8002758:	6039      	str	r1, [r7, #0]
 800275a:	4649      	mov	r1, r9
 800275c:	414b      	adcs	r3, r1
 800275e:	607b      	str	r3, [r7, #4]
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800276c:	4659      	mov	r1, fp
 800276e:	00cb      	lsls	r3, r1, #3
 8002770:	4651      	mov	r1, sl
 8002772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002776:	4651      	mov	r1, sl
 8002778:	00ca      	lsls	r2, r1, #3
 800277a:	4610      	mov	r0, r2
 800277c:	4619      	mov	r1, r3
 800277e:	4603      	mov	r3, r0
 8002780:	4642      	mov	r2, r8
 8002782:	189b      	adds	r3, r3, r2
 8002784:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002786:	464b      	mov	r3, r9
 8002788:	460a      	mov	r2, r1
 800278a:	eb42 0303 	adc.w	r3, r2, r3
 800278e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	663b      	str	r3, [r7, #96]	@ 0x60
 800279a:	667a      	str	r2, [r7, #100]	@ 0x64
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	f04f 0300 	mov.w	r3, #0
 80027a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80027a8:	4649      	mov	r1, r9
 80027aa:	008b      	lsls	r3, r1, #2
 80027ac:	4641      	mov	r1, r8
 80027ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027b2:	4641      	mov	r1, r8
 80027b4:	008a      	lsls	r2, r1, #2
 80027b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80027ba:	f7fd fd61 	bl	8000280 <__aeabi_uldivmod>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4b0d      	ldr	r3, [pc, #52]	@ (80027f8 <UART_SetConfig+0x4e4>)
 80027c4:	fba3 1302 	umull	r1, r3, r3, r2
 80027c8:	095b      	lsrs	r3, r3, #5
 80027ca:	2164      	movs	r1, #100	@ 0x64
 80027cc:	fb01 f303 	mul.w	r3, r1, r3
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	3332      	adds	r3, #50	@ 0x32
 80027d6:	4a08      	ldr	r2, [pc, #32]	@ (80027f8 <UART_SetConfig+0x4e4>)
 80027d8:	fba2 2303 	umull	r2, r3, r2, r3
 80027dc:	095b      	lsrs	r3, r3, #5
 80027de:	f003 020f 	and.w	r2, r3, #15
 80027e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4422      	add	r2, r4
 80027ea:	609a      	str	r2, [r3, #8]
}
 80027ec:	bf00      	nop
 80027ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80027f2:	46bd      	mov	sp, r7
 80027f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027f8:	51eb851f 	.word	0x51eb851f

080027fc <std>:
 80027fc:	2300      	movs	r3, #0
 80027fe:	b510      	push	{r4, lr}
 8002800:	4604      	mov	r4, r0
 8002802:	e9c0 3300 	strd	r3, r3, [r0]
 8002806:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800280a:	6083      	str	r3, [r0, #8]
 800280c:	8181      	strh	r1, [r0, #12]
 800280e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002810:	81c2      	strh	r2, [r0, #14]
 8002812:	6183      	str	r3, [r0, #24]
 8002814:	4619      	mov	r1, r3
 8002816:	2208      	movs	r2, #8
 8002818:	305c      	adds	r0, #92	@ 0x5c
 800281a:	f000 f906 	bl	8002a2a <memset>
 800281e:	4b0d      	ldr	r3, [pc, #52]	@ (8002854 <std+0x58>)
 8002820:	6263      	str	r3, [r4, #36]	@ 0x24
 8002822:	4b0d      	ldr	r3, [pc, #52]	@ (8002858 <std+0x5c>)
 8002824:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002826:	4b0d      	ldr	r3, [pc, #52]	@ (800285c <std+0x60>)
 8002828:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800282a:	4b0d      	ldr	r3, [pc, #52]	@ (8002860 <std+0x64>)
 800282c:	6323      	str	r3, [r4, #48]	@ 0x30
 800282e:	4b0d      	ldr	r3, [pc, #52]	@ (8002864 <std+0x68>)
 8002830:	6224      	str	r4, [r4, #32]
 8002832:	429c      	cmp	r4, r3
 8002834:	d006      	beq.n	8002844 <std+0x48>
 8002836:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800283a:	4294      	cmp	r4, r2
 800283c:	d002      	beq.n	8002844 <std+0x48>
 800283e:	33d0      	adds	r3, #208	@ 0xd0
 8002840:	429c      	cmp	r4, r3
 8002842:	d105      	bne.n	8002850 <std+0x54>
 8002844:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800284c:	f000 b966 	b.w	8002b1c <__retarget_lock_init_recursive>
 8002850:	bd10      	pop	{r4, pc}
 8002852:	bf00      	nop
 8002854:	080029a5 	.word	0x080029a5
 8002858:	080029c7 	.word	0x080029c7
 800285c:	080029ff 	.word	0x080029ff
 8002860:	08002a23 	.word	0x08002a23
 8002864:	20000134 	.word	0x20000134

08002868 <stdio_exit_handler>:
 8002868:	4a02      	ldr	r2, [pc, #8]	@ (8002874 <stdio_exit_handler+0xc>)
 800286a:	4903      	ldr	r1, [pc, #12]	@ (8002878 <stdio_exit_handler+0x10>)
 800286c:	4803      	ldr	r0, [pc, #12]	@ (800287c <stdio_exit_handler+0x14>)
 800286e:	f000 b869 	b.w	8002944 <_fwalk_sglue>
 8002872:	bf00      	nop
 8002874:	2000000c 	.word	0x2000000c
 8002878:	080033bd 	.word	0x080033bd
 800287c:	2000001c 	.word	0x2000001c

08002880 <cleanup_stdio>:
 8002880:	6841      	ldr	r1, [r0, #4]
 8002882:	4b0c      	ldr	r3, [pc, #48]	@ (80028b4 <cleanup_stdio+0x34>)
 8002884:	4299      	cmp	r1, r3
 8002886:	b510      	push	{r4, lr}
 8002888:	4604      	mov	r4, r0
 800288a:	d001      	beq.n	8002890 <cleanup_stdio+0x10>
 800288c:	f000 fd96 	bl	80033bc <_fflush_r>
 8002890:	68a1      	ldr	r1, [r4, #8]
 8002892:	4b09      	ldr	r3, [pc, #36]	@ (80028b8 <cleanup_stdio+0x38>)
 8002894:	4299      	cmp	r1, r3
 8002896:	d002      	beq.n	800289e <cleanup_stdio+0x1e>
 8002898:	4620      	mov	r0, r4
 800289a:	f000 fd8f 	bl	80033bc <_fflush_r>
 800289e:	68e1      	ldr	r1, [r4, #12]
 80028a0:	4b06      	ldr	r3, [pc, #24]	@ (80028bc <cleanup_stdio+0x3c>)
 80028a2:	4299      	cmp	r1, r3
 80028a4:	d004      	beq.n	80028b0 <cleanup_stdio+0x30>
 80028a6:	4620      	mov	r0, r4
 80028a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028ac:	f000 bd86 	b.w	80033bc <_fflush_r>
 80028b0:	bd10      	pop	{r4, pc}
 80028b2:	bf00      	nop
 80028b4:	20000134 	.word	0x20000134
 80028b8:	2000019c 	.word	0x2000019c
 80028bc:	20000204 	.word	0x20000204

080028c0 <global_stdio_init.part.0>:
 80028c0:	b510      	push	{r4, lr}
 80028c2:	4b0b      	ldr	r3, [pc, #44]	@ (80028f0 <global_stdio_init.part.0+0x30>)
 80028c4:	4c0b      	ldr	r4, [pc, #44]	@ (80028f4 <global_stdio_init.part.0+0x34>)
 80028c6:	4a0c      	ldr	r2, [pc, #48]	@ (80028f8 <global_stdio_init.part.0+0x38>)
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	4620      	mov	r0, r4
 80028cc:	2200      	movs	r2, #0
 80028ce:	2104      	movs	r1, #4
 80028d0:	f7ff ff94 	bl	80027fc <std>
 80028d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80028d8:	2201      	movs	r2, #1
 80028da:	2109      	movs	r1, #9
 80028dc:	f7ff ff8e 	bl	80027fc <std>
 80028e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80028e4:	2202      	movs	r2, #2
 80028e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028ea:	2112      	movs	r1, #18
 80028ec:	f7ff bf86 	b.w	80027fc <std>
 80028f0:	2000026c 	.word	0x2000026c
 80028f4:	20000134 	.word	0x20000134
 80028f8:	08002869 	.word	0x08002869

080028fc <__sfp_lock_acquire>:
 80028fc:	4801      	ldr	r0, [pc, #4]	@ (8002904 <__sfp_lock_acquire+0x8>)
 80028fe:	f000 b90e 	b.w	8002b1e <__retarget_lock_acquire_recursive>
 8002902:	bf00      	nop
 8002904:	20000275 	.word	0x20000275

08002908 <__sfp_lock_release>:
 8002908:	4801      	ldr	r0, [pc, #4]	@ (8002910 <__sfp_lock_release+0x8>)
 800290a:	f000 b909 	b.w	8002b20 <__retarget_lock_release_recursive>
 800290e:	bf00      	nop
 8002910:	20000275 	.word	0x20000275

08002914 <__sinit>:
 8002914:	b510      	push	{r4, lr}
 8002916:	4604      	mov	r4, r0
 8002918:	f7ff fff0 	bl	80028fc <__sfp_lock_acquire>
 800291c:	6a23      	ldr	r3, [r4, #32]
 800291e:	b11b      	cbz	r3, 8002928 <__sinit+0x14>
 8002920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002924:	f7ff bff0 	b.w	8002908 <__sfp_lock_release>
 8002928:	4b04      	ldr	r3, [pc, #16]	@ (800293c <__sinit+0x28>)
 800292a:	6223      	str	r3, [r4, #32]
 800292c:	4b04      	ldr	r3, [pc, #16]	@ (8002940 <__sinit+0x2c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f5      	bne.n	8002920 <__sinit+0xc>
 8002934:	f7ff ffc4 	bl	80028c0 <global_stdio_init.part.0>
 8002938:	e7f2      	b.n	8002920 <__sinit+0xc>
 800293a:	bf00      	nop
 800293c:	08002881 	.word	0x08002881
 8002940:	2000026c 	.word	0x2000026c

08002944 <_fwalk_sglue>:
 8002944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002948:	4607      	mov	r7, r0
 800294a:	4688      	mov	r8, r1
 800294c:	4614      	mov	r4, r2
 800294e:	2600      	movs	r6, #0
 8002950:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002954:	f1b9 0901 	subs.w	r9, r9, #1
 8002958:	d505      	bpl.n	8002966 <_fwalk_sglue+0x22>
 800295a:	6824      	ldr	r4, [r4, #0]
 800295c:	2c00      	cmp	r4, #0
 800295e:	d1f7      	bne.n	8002950 <_fwalk_sglue+0xc>
 8002960:	4630      	mov	r0, r6
 8002962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002966:	89ab      	ldrh	r3, [r5, #12]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d907      	bls.n	800297c <_fwalk_sglue+0x38>
 800296c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002970:	3301      	adds	r3, #1
 8002972:	d003      	beq.n	800297c <_fwalk_sglue+0x38>
 8002974:	4629      	mov	r1, r5
 8002976:	4638      	mov	r0, r7
 8002978:	47c0      	blx	r8
 800297a:	4306      	orrs	r6, r0
 800297c:	3568      	adds	r5, #104	@ 0x68
 800297e:	e7e9      	b.n	8002954 <_fwalk_sglue+0x10>

08002980 <iprintf>:
 8002980:	b40f      	push	{r0, r1, r2, r3}
 8002982:	b507      	push	{r0, r1, r2, lr}
 8002984:	4906      	ldr	r1, [pc, #24]	@ (80029a0 <iprintf+0x20>)
 8002986:	ab04      	add	r3, sp, #16
 8002988:	6808      	ldr	r0, [r1, #0]
 800298a:	f853 2b04 	ldr.w	r2, [r3], #4
 800298e:	6881      	ldr	r1, [r0, #8]
 8002990:	9301      	str	r3, [sp, #4]
 8002992:	f000 f9e9 	bl	8002d68 <_vfiprintf_r>
 8002996:	b003      	add	sp, #12
 8002998:	f85d eb04 	ldr.w	lr, [sp], #4
 800299c:	b004      	add	sp, #16
 800299e:	4770      	bx	lr
 80029a0:	20000018 	.word	0x20000018

080029a4 <__sread>:
 80029a4:	b510      	push	{r4, lr}
 80029a6:	460c      	mov	r4, r1
 80029a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029ac:	f000 f868 	bl	8002a80 <_read_r>
 80029b0:	2800      	cmp	r0, #0
 80029b2:	bfab      	itete	ge
 80029b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80029b6:	89a3      	ldrhlt	r3, [r4, #12]
 80029b8:	181b      	addge	r3, r3, r0
 80029ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80029be:	bfac      	ite	ge
 80029c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80029c2:	81a3      	strhlt	r3, [r4, #12]
 80029c4:	bd10      	pop	{r4, pc}

080029c6 <__swrite>:
 80029c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029ca:	461f      	mov	r7, r3
 80029cc:	898b      	ldrh	r3, [r1, #12]
 80029ce:	05db      	lsls	r3, r3, #23
 80029d0:	4605      	mov	r5, r0
 80029d2:	460c      	mov	r4, r1
 80029d4:	4616      	mov	r6, r2
 80029d6:	d505      	bpl.n	80029e4 <__swrite+0x1e>
 80029d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029dc:	2302      	movs	r3, #2
 80029de:	2200      	movs	r2, #0
 80029e0:	f000 f83c 	bl	8002a5c <_lseek_r>
 80029e4:	89a3      	ldrh	r3, [r4, #12]
 80029e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80029ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80029ee:	81a3      	strh	r3, [r4, #12]
 80029f0:	4632      	mov	r2, r6
 80029f2:	463b      	mov	r3, r7
 80029f4:	4628      	mov	r0, r5
 80029f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80029fa:	f000 b853 	b.w	8002aa4 <_write_r>

080029fe <__sseek>:
 80029fe:	b510      	push	{r4, lr}
 8002a00:	460c      	mov	r4, r1
 8002a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a06:	f000 f829 	bl	8002a5c <_lseek_r>
 8002a0a:	1c43      	adds	r3, r0, #1
 8002a0c:	89a3      	ldrh	r3, [r4, #12]
 8002a0e:	bf15      	itete	ne
 8002a10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002a12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002a16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002a1a:	81a3      	strheq	r3, [r4, #12]
 8002a1c:	bf18      	it	ne
 8002a1e:	81a3      	strhne	r3, [r4, #12]
 8002a20:	bd10      	pop	{r4, pc}

08002a22 <__sclose>:
 8002a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a26:	f000 b809 	b.w	8002a3c <_close_r>

08002a2a <memset>:
 8002a2a:	4402      	add	r2, r0
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d100      	bne.n	8002a34 <memset+0xa>
 8002a32:	4770      	bx	lr
 8002a34:	f803 1b01 	strb.w	r1, [r3], #1
 8002a38:	e7f9      	b.n	8002a2e <memset+0x4>
	...

08002a3c <_close_r>:
 8002a3c:	b538      	push	{r3, r4, r5, lr}
 8002a3e:	4d06      	ldr	r5, [pc, #24]	@ (8002a58 <_close_r+0x1c>)
 8002a40:	2300      	movs	r3, #0
 8002a42:	4604      	mov	r4, r0
 8002a44:	4608      	mov	r0, r1
 8002a46:	602b      	str	r3, [r5, #0]
 8002a48:	f7fe f980 	bl	8000d4c <_close>
 8002a4c:	1c43      	adds	r3, r0, #1
 8002a4e:	d102      	bne.n	8002a56 <_close_r+0x1a>
 8002a50:	682b      	ldr	r3, [r5, #0]
 8002a52:	b103      	cbz	r3, 8002a56 <_close_r+0x1a>
 8002a54:	6023      	str	r3, [r4, #0]
 8002a56:	bd38      	pop	{r3, r4, r5, pc}
 8002a58:	20000270 	.word	0x20000270

08002a5c <_lseek_r>:
 8002a5c:	b538      	push	{r3, r4, r5, lr}
 8002a5e:	4d07      	ldr	r5, [pc, #28]	@ (8002a7c <_lseek_r+0x20>)
 8002a60:	4604      	mov	r4, r0
 8002a62:	4608      	mov	r0, r1
 8002a64:	4611      	mov	r1, r2
 8002a66:	2200      	movs	r2, #0
 8002a68:	602a      	str	r2, [r5, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f7fe f995 	bl	8000d9a <_lseek>
 8002a70:	1c43      	adds	r3, r0, #1
 8002a72:	d102      	bne.n	8002a7a <_lseek_r+0x1e>
 8002a74:	682b      	ldr	r3, [r5, #0]
 8002a76:	b103      	cbz	r3, 8002a7a <_lseek_r+0x1e>
 8002a78:	6023      	str	r3, [r4, #0]
 8002a7a:	bd38      	pop	{r3, r4, r5, pc}
 8002a7c:	20000270 	.word	0x20000270

08002a80 <_read_r>:
 8002a80:	b538      	push	{r3, r4, r5, lr}
 8002a82:	4d07      	ldr	r5, [pc, #28]	@ (8002aa0 <_read_r+0x20>)
 8002a84:	4604      	mov	r4, r0
 8002a86:	4608      	mov	r0, r1
 8002a88:	4611      	mov	r1, r2
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	602a      	str	r2, [r5, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f7fe f93f 	bl	8000d12 <_read>
 8002a94:	1c43      	adds	r3, r0, #1
 8002a96:	d102      	bne.n	8002a9e <_read_r+0x1e>
 8002a98:	682b      	ldr	r3, [r5, #0]
 8002a9a:	b103      	cbz	r3, 8002a9e <_read_r+0x1e>
 8002a9c:	6023      	str	r3, [r4, #0]
 8002a9e:	bd38      	pop	{r3, r4, r5, pc}
 8002aa0:	20000270 	.word	0x20000270

08002aa4 <_write_r>:
 8002aa4:	b538      	push	{r3, r4, r5, lr}
 8002aa6:	4d07      	ldr	r5, [pc, #28]	@ (8002ac4 <_write_r+0x20>)
 8002aa8:	4604      	mov	r4, r0
 8002aaa:	4608      	mov	r0, r1
 8002aac:	4611      	mov	r1, r2
 8002aae:	2200      	movs	r2, #0
 8002ab0:	602a      	str	r2, [r5, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	f7fd fee2 	bl	800087c <_write>
 8002ab8:	1c43      	adds	r3, r0, #1
 8002aba:	d102      	bne.n	8002ac2 <_write_r+0x1e>
 8002abc:	682b      	ldr	r3, [r5, #0]
 8002abe:	b103      	cbz	r3, 8002ac2 <_write_r+0x1e>
 8002ac0:	6023      	str	r3, [r4, #0]
 8002ac2:	bd38      	pop	{r3, r4, r5, pc}
 8002ac4:	20000270 	.word	0x20000270

08002ac8 <__errno>:
 8002ac8:	4b01      	ldr	r3, [pc, #4]	@ (8002ad0 <__errno+0x8>)
 8002aca:	6818      	ldr	r0, [r3, #0]
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	20000018 	.word	0x20000018

08002ad4 <__libc_init_array>:
 8002ad4:	b570      	push	{r4, r5, r6, lr}
 8002ad6:	4d0d      	ldr	r5, [pc, #52]	@ (8002b0c <__libc_init_array+0x38>)
 8002ad8:	4c0d      	ldr	r4, [pc, #52]	@ (8002b10 <__libc_init_array+0x3c>)
 8002ada:	1b64      	subs	r4, r4, r5
 8002adc:	10a4      	asrs	r4, r4, #2
 8002ade:	2600      	movs	r6, #0
 8002ae0:	42a6      	cmp	r6, r4
 8002ae2:	d109      	bne.n	8002af8 <__libc_init_array+0x24>
 8002ae4:	4d0b      	ldr	r5, [pc, #44]	@ (8002b14 <__libc_init_array+0x40>)
 8002ae6:	4c0c      	ldr	r4, [pc, #48]	@ (8002b18 <__libc_init_array+0x44>)
 8002ae8:	f000 fdb8 	bl	800365c <_init>
 8002aec:	1b64      	subs	r4, r4, r5
 8002aee:	10a4      	asrs	r4, r4, #2
 8002af0:	2600      	movs	r6, #0
 8002af2:	42a6      	cmp	r6, r4
 8002af4:	d105      	bne.n	8002b02 <__libc_init_array+0x2e>
 8002af6:	bd70      	pop	{r4, r5, r6, pc}
 8002af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002afc:	4798      	blx	r3
 8002afe:	3601      	adds	r6, #1
 8002b00:	e7ee      	b.n	8002ae0 <__libc_init_array+0xc>
 8002b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b06:	4798      	blx	r3
 8002b08:	3601      	adds	r6, #1
 8002b0a:	e7f2      	b.n	8002af2 <__libc_init_array+0x1e>
 8002b0c:	080036f0 	.word	0x080036f0
 8002b10:	080036f0 	.word	0x080036f0
 8002b14:	080036f0 	.word	0x080036f0
 8002b18:	080036f4 	.word	0x080036f4

08002b1c <__retarget_lock_init_recursive>:
 8002b1c:	4770      	bx	lr

08002b1e <__retarget_lock_acquire_recursive>:
 8002b1e:	4770      	bx	lr

08002b20 <__retarget_lock_release_recursive>:
 8002b20:	4770      	bx	lr
	...

08002b24 <_free_r>:
 8002b24:	b538      	push	{r3, r4, r5, lr}
 8002b26:	4605      	mov	r5, r0
 8002b28:	2900      	cmp	r1, #0
 8002b2a:	d041      	beq.n	8002bb0 <_free_r+0x8c>
 8002b2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b30:	1f0c      	subs	r4, r1, #4
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	bfb8      	it	lt
 8002b36:	18e4      	addlt	r4, r4, r3
 8002b38:	f000 f8e0 	bl	8002cfc <__malloc_lock>
 8002b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002bb4 <_free_r+0x90>)
 8002b3e:	6813      	ldr	r3, [r2, #0]
 8002b40:	b933      	cbnz	r3, 8002b50 <_free_r+0x2c>
 8002b42:	6063      	str	r3, [r4, #4]
 8002b44:	6014      	str	r4, [r2, #0]
 8002b46:	4628      	mov	r0, r5
 8002b48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b4c:	f000 b8dc 	b.w	8002d08 <__malloc_unlock>
 8002b50:	42a3      	cmp	r3, r4
 8002b52:	d908      	bls.n	8002b66 <_free_r+0x42>
 8002b54:	6820      	ldr	r0, [r4, #0]
 8002b56:	1821      	adds	r1, r4, r0
 8002b58:	428b      	cmp	r3, r1
 8002b5a:	bf01      	itttt	eq
 8002b5c:	6819      	ldreq	r1, [r3, #0]
 8002b5e:	685b      	ldreq	r3, [r3, #4]
 8002b60:	1809      	addeq	r1, r1, r0
 8002b62:	6021      	streq	r1, [r4, #0]
 8002b64:	e7ed      	b.n	8002b42 <_free_r+0x1e>
 8002b66:	461a      	mov	r2, r3
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	b10b      	cbz	r3, 8002b70 <_free_r+0x4c>
 8002b6c:	42a3      	cmp	r3, r4
 8002b6e:	d9fa      	bls.n	8002b66 <_free_r+0x42>
 8002b70:	6811      	ldr	r1, [r2, #0]
 8002b72:	1850      	adds	r0, r2, r1
 8002b74:	42a0      	cmp	r0, r4
 8002b76:	d10b      	bne.n	8002b90 <_free_r+0x6c>
 8002b78:	6820      	ldr	r0, [r4, #0]
 8002b7a:	4401      	add	r1, r0
 8002b7c:	1850      	adds	r0, r2, r1
 8002b7e:	4283      	cmp	r3, r0
 8002b80:	6011      	str	r1, [r2, #0]
 8002b82:	d1e0      	bne.n	8002b46 <_free_r+0x22>
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	6053      	str	r3, [r2, #4]
 8002b8a:	4408      	add	r0, r1
 8002b8c:	6010      	str	r0, [r2, #0]
 8002b8e:	e7da      	b.n	8002b46 <_free_r+0x22>
 8002b90:	d902      	bls.n	8002b98 <_free_r+0x74>
 8002b92:	230c      	movs	r3, #12
 8002b94:	602b      	str	r3, [r5, #0]
 8002b96:	e7d6      	b.n	8002b46 <_free_r+0x22>
 8002b98:	6820      	ldr	r0, [r4, #0]
 8002b9a:	1821      	adds	r1, r4, r0
 8002b9c:	428b      	cmp	r3, r1
 8002b9e:	bf04      	itt	eq
 8002ba0:	6819      	ldreq	r1, [r3, #0]
 8002ba2:	685b      	ldreq	r3, [r3, #4]
 8002ba4:	6063      	str	r3, [r4, #4]
 8002ba6:	bf04      	itt	eq
 8002ba8:	1809      	addeq	r1, r1, r0
 8002baa:	6021      	streq	r1, [r4, #0]
 8002bac:	6054      	str	r4, [r2, #4]
 8002bae:	e7ca      	b.n	8002b46 <_free_r+0x22>
 8002bb0:	bd38      	pop	{r3, r4, r5, pc}
 8002bb2:	bf00      	nop
 8002bb4:	2000027c 	.word	0x2000027c

08002bb8 <sbrk_aligned>:
 8002bb8:	b570      	push	{r4, r5, r6, lr}
 8002bba:	4e0f      	ldr	r6, [pc, #60]	@ (8002bf8 <sbrk_aligned+0x40>)
 8002bbc:	460c      	mov	r4, r1
 8002bbe:	6831      	ldr	r1, [r6, #0]
 8002bc0:	4605      	mov	r5, r0
 8002bc2:	b911      	cbnz	r1, 8002bca <sbrk_aligned+0x12>
 8002bc4:	f000 fcb6 	bl	8003534 <_sbrk_r>
 8002bc8:	6030      	str	r0, [r6, #0]
 8002bca:	4621      	mov	r1, r4
 8002bcc:	4628      	mov	r0, r5
 8002bce:	f000 fcb1 	bl	8003534 <_sbrk_r>
 8002bd2:	1c43      	adds	r3, r0, #1
 8002bd4:	d103      	bne.n	8002bde <sbrk_aligned+0x26>
 8002bd6:	f04f 34ff 	mov.w	r4, #4294967295
 8002bda:	4620      	mov	r0, r4
 8002bdc:	bd70      	pop	{r4, r5, r6, pc}
 8002bde:	1cc4      	adds	r4, r0, #3
 8002be0:	f024 0403 	bic.w	r4, r4, #3
 8002be4:	42a0      	cmp	r0, r4
 8002be6:	d0f8      	beq.n	8002bda <sbrk_aligned+0x22>
 8002be8:	1a21      	subs	r1, r4, r0
 8002bea:	4628      	mov	r0, r5
 8002bec:	f000 fca2 	bl	8003534 <_sbrk_r>
 8002bf0:	3001      	adds	r0, #1
 8002bf2:	d1f2      	bne.n	8002bda <sbrk_aligned+0x22>
 8002bf4:	e7ef      	b.n	8002bd6 <sbrk_aligned+0x1e>
 8002bf6:	bf00      	nop
 8002bf8:	20000278 	.word	0x20000278

08002bfc <_malloc_r>:
 8002bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c00:	1ccd      	adds	r5, r1, #3
 8002c02:	f025 0503 	bic.w	r5, r5, #3
 8002c06:	3508      	adds	r5, #8
 8002c08:	2d0c      	cmp	r5, #12
 8002c0a:	bf38      	it	cc
 8002c0c:	250c      	movcc	r5, #12
 8002c0e:	2d00      	cmp	r5, #0
 8002c10:	4606      	mov	r6, r0
 8002c12:	db01      	blt.n	8002c18 <_malloc_r+0x1c>
 8002c14:	42a9      	cmp	r1, r5
 8002c16:	d904      	bls.n	8002c22 <_malloc_r+0x26>
 8002c18:	230c      	movs	r3, #12
 8002c1a:	6033      	str	r3, [r6, #0]
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002cf8 <_malloc_r+0xfc>
 8002c26:	f000 f869 	bl	8002cfc <__malloc_lock>
 8002c2a:	f8d8 3000 	ldr.w	r3, [r8]
 8002c2e:	461c      	mov	r4, r3
 8002c30:	bb44      	cbnz	r4, 8002c84 <_malloc_r+0x88>
 8002c32:	4629      	mov	r1, r5
 8002c34:	4630      	mov	r0, r6
 8002c36:	f7ff ffbf 	bl	8002bb8 <sbrk_aligned>
 8002c3a:	1c43      	adds	r3, r0, #1
 8002c3c:	4604      	mov	r4, r0
 8002c3e:	d158      	bne.n	8002cf2 <_malloc_r+0xf6>
 8002c40:	f8d8 4000 	ldr.w	r4, [r8]
 8002c44:	4627      	mov	r7, r4
 8002c46:	2f00      	cmp	r7, #0
 8002c48:	d143      	bne.n	8002cd2 <_malloc_r+0xd6>
 8002c4a:	2c00      	cmp	r4, #0
 8002c4c:	d04b      	beq.n	8002ce6 <_malloc_r+0xea>
 8002c4e:	6823      	ldr	r3, [r4, #0]
 8002c50:	4639      	mov	r1, r7
 8002c52:	4630      	mov	r0, r6
 8002c54:	eb04 0903 	add.w	r9, r4, r3
 8002c58:	f000 fc6c 	bl	8003534 <_sbrk_r>
 8002c5c:	4581      	cmp	r9, r0
 8002c5e:	d142      	bne.n	8002ce6 <_malloc_r+0xea>
 8002c60:	6821      	ldr	r1, [r4, #0]
 8002c62:	1a6d      	subs	r5, r5, r1
 8002c64:	4629      	mov	r1, r5
 8002c66:	4630      	mov	r0, r6
 8002c68:	f7ff ffa6 	bl	8002bb8 <sbrk_aligned>
 8002c6c:	3001      	adds	r0, #1
 8002c6e:	d03a      	beq.n	8002ce6 <_malloc_r+0xea>
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	442b      	add	r3, r5
 8002c74:	6023      	str	r3, [r4, #0]
 8002c76:	f8d8 3000 	ldr.w	r3, [r8]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	bb62      	cbnz	r2, 8002cd8 <_malloc_r+0xdc>
 8002c7e:	f8c8 7000 	str.w	r7, [r8]
 8002c82:	e00f      	b.n	8002ca4 <_malloc_r+0xa8>
 8002c84:	6822      	ldr	r2, [r4, #0]
 8002c86:	1b52      	subs	r2, r2, r5
 8002c88:	d420      	bmi.n	8002ccc <_malloc_r+0xd0>
 8002c8a:	2a0b      	cmp	r2, #11
 8002c8c:	d917      	bls.n	8002cbe <_malloc_r+0xc2>
 8002c8e:	1961      	adds	r1, r4, r5
 8002c90:	42a3      	cmp	r3, r4
 8002c92:	6025      	str	r5, [r4, #0]
 8002c94:	bf18      	it	ne
 8002c96:	6059      	strne	r1, [r3, #4]
 8002c98:	6863      	ldr	r3, [r4, #4]
 8002c9a:	bf08      	it	eq
 8002c9c:	f8c8 1000 	streq.w	r1, [r8]
 8002ca0:	5162      	str	r2, [r4, r5]
 8002ca2:	604b      	str	r3, [r1, #4]
 8002ca4:	4630      	mov	r0, r6
 8002ca6:	f000 f82f 	bl	8002d08 <__malloc_unlock>
 8002caa:	f104 000b 	add.w	r0, r4, #11
 8002cae:	1d23      	adds	r3, r4, #4
 8002cb0:	f020 0007 	bic.w	r0, r0, #7
 8002cb4:	1ac2      	subs	r2, r0, r3
 8002cb6:	bf1c      	itt	ne
 8002cb8:	1a1b      	subne	r3, r3, r0
 8002cba:	50a3      	strne	r3, [r4, r2]
 8002cbc:	e7af      	b.n	8002c1e <_malloc_r+0x22>
 8002cbe:	6862      	ldr	r2, [r4, #4]
 8002cc0:	42a3      	cmp	r3, r4
 8002cc2:	bf0c      	ite	eq
 8002cc4:	f8c8 2000 	streq.w	r2, [r8]
 8002cc8:	605a      	strne	r2, [r3, #4]
 8002cca:	e7eb      	b.n	8002ca4 <_malloc_r+0xa8>
 8002ccc:	4623      	mov	r3, r4
 8002cce:	6864      	ldr	r4, [r4, #4]
 8002cd0:	e7ae      	b.n	8002c30 <_malloc_r+0x34>
 8002cd2:	463c      	mov	r4, r7
 8002cd4:	687f      	ldr	r7, [r7, #4]
 8002cd6:	e7b6      	b.n	8002c46 <_malloc_r+0x4a>
 8002cd8:	461a      	mov	r2, r3
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	42a3      	cmp	r3, r4
 8002cde:	d1fb      	bne.n	8002cd8 <_malloc_r+0xdc>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	6053      	str	r3, [r2, #4]
 8002ce4:	e7de      	b.n	8002ca4 <_malloc_r+0xa8>
 8002ce6:	230c      	movs	r3, #12
 8002ce8:	6033      	str	r3, [r6, #0]
 8002cea:	4630      	mov	r0, r6
 8002cec:	f000 f80c 	bl	8002d08 <__malloc_unlock>
 8002cf0:	e794      	b.n	8002c1c <_malloc_r+0x20>
 8002cf2:	6005      	str	r5, [r0, #0]
 8002cf4:	e7d6      	b.n	8002ca4 <_malloc_r+0xa8>
 8002cf6:	bf00      	nop
 8002cf8:	2000027c 	.word	0x2000027c

08002cfc <__malloc_lock>:
 8002cfc:	4801      	ldr	r0, [pc, #4]	@ (8002d04 <__malloc_lock+0x8>)
 8002cfe:	f7ff bf0e 	b.w	8002b1e <__retarget_lock_acquire_recursive>
 8002d02:	bf00      	nop
 8002d04:	20000274 	.word	0x20000274

08002d08 <__malloc_unlock>:
 8002d08:	4801      	ldr	r0, [pc, #4]	@ (8002d10 <__malloc_unlock+0x8>)
 8002d0a:	f7ff bf09 	b.w	8002b20 <__retarget_lock_release_recursive>
 8002d0e:	bf00      	nop
 8002d10:	20000274 	.word	0x20000274

08002d14 <__sfputc_r>:
 8002d14:	6893      	ldr	r3, [r2, #8]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	b410      	push	{r4}
 8002d1c:	6093      	str	r3, [r2, #8]
 8002d1e:	da08      	bge.n	8002d32 <__sfputc_r+0x1e>
 8002d20:	6994      	ldr	r4, [r2, #24]
 8002d22:	42a3      	cmp	r3, r4
 8002d24:	db01      	blt.n	8002d2a <__sfputc_r+0x16>
 8002d26:	290a      	cmp	r1, #10
 8002d28:	d103      	bne.n	8002d32 <__sfputc_r+0x1e>
 8002d2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d2e:	f000 bb6d 	b.w	800340c <__swbuf_r>
 8002d32:	6813      	ldr	r3, [r2, #0]
 8002d34:	1c58      	adds	r0, r3, #1
 8002d36:	6010      	str	r0, [r2, #0]
 8002d38:	7019      	strb	r1, [r3, #0]
 8002d3a:	4608      	mov	r0, r1
 8002d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <__sfputs_r>:
 8002d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d44:	4606      	mov	r6, r0
 8002d46:	460f      	mov	r7, r1
 8002d48:	4614      	mov	r4, r2
 8002d4a:	18d5      	adds	r5, r2, r3
 8002d4c:	42ac      	cmp	r4, r5
 8002d4e:	d101      	bne.n	8002d54 <__sfputs_r+0x12>
 8002d50:	2000      	movs	r0, #0
 8002d52:	e007      	b.n	8002d64 <__sfputs_r+0x22>
 8002d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d58:	463a      	mov	r2, r7
 8002d5a:	4630      	mov	r0, r6
 8002d5c:	f7ff ffda 	bl	8002d14 <__sfputc_r>
 8002d60:	1c43      	adds	r3, r0, #1
 8002d62:	d1f3      	bne.n	8002d4c <__sfputs_r+0xa>
 8002d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d68 <_vfiprintf_r>:
 8002d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d6c:	460d      	mov	r5, r1
 8002d6e:	b09d      	sub	sp, #116	@ 0x74
 8002d70:	4614      	mov	r4, r2
 8002d72:	4698      	mov	r8, r3
 8002d74:	4606      	mov	r6, r0
 8002d76:	b118      	cbz	r0, 8002d80 <_vfiprintf_r+0x18>
 8002d78:	6a03      	ldr	r3, [r0, #32]
 8002d7a:	b90b      	cbnz	r3, 8002d80 <_vfiprintf_r+0x18>
 8002d7c:	f7ff fdca 	bl	8002914 <__sinit>
 8002d80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002d82:	07d9      	lsls	r1, r3, #31
 8002d84:	d405      	bmi.n	8002d92 <_vfiprintf_r+0x2a>
 8002d86:	89ab      	ldrh	r3, [r5, #12]
 8002d88:	059a      	lsls	r2, r3, #22
 8002d8a:	d402      	bmi.n	8002d92 <_vfiprintf_r+0x2a>
 8002d8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002d8e:	f7ff fec6 	bl	8002b1e <__retarget_lock_acquire_recursive>
 8002d92:	89ab      	ldrh	r3, [r5, #12]
 8002d94:	071b      	lsls	r3, r3, #28
 8002d96:	d501      	bpl.n	8002d9c <_vfiprintf_r+0x34>
 8002d98:	692b      	ldr	r3, [r5, #16]
 8002d9a:	b99b      	cbnz	r3, 8002dc4 <_vfiprintf_r+0x5c>
 8002d9c:	4629      	mov	r1, r5
 8002d9e:	4630      	mov	r0, r6
 8002da0:	f000 fb72 	bl	8003488 <__swsetup_r>
 8002da4:	b170      	cbz	r0, 8002dc4 <_vfiprintf_r+0x5c>
 8002da6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002da8:	07dc      	lsls	r4, r3, #31
 8002daa:	d504      	bpl.n	8002db6 <_vfiprintf_r+0x4e>
 8002dac:	f04f 30ff 	mov.w	r0, #4294967295
 8002db0:	b01d      	add	sp, #116	@ 0x74
 8002db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002db6:	89ab      	ldrh	r3, [r5, #12]
 8002db8:	0598      	lsls	r0, r3, #22
 8002dba:	d4f7      	bmi.n	8002dac <_vfiprintf_r+0x44>
 8002dbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002dbe:	f7ff feaf 	bl	8002b20 <__retarget_lock_release_recursive>
 8002dc2:	e7f3      	b.n	8002dac <_vfiprintf_r+0x44>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8002dc8:	2320      	movs	r3, #32
 8002dca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002dce:	f8cd 800c 	str.w	r8, [sp, #12]
 8002dd2:	2330      	movs	r3, #48	@ 0x30
 8002dd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002f84 <_vfiprintf_r+0x21c>
 8002dd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002ddc:	f04f 0901 	mov.w	r9, #1
 8002de0:	4623      	mov	r3, r4
 8002de2:	469a      	mov	sl, r3
 8002de4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002de8:	b10a      	cbz	r2, 8002dee <_vfiprintf_r+0x86>
 8002dea:	2a25      	cmp	r2, #37	@ 0x25
 8002dec:	d1f9      	bne.n	8002de2 <_vfiprintf_r+0x7a>
 8002dee:	ebba 0b04 	subs.w	fp, sl, r4
 8002df2:	d00b      	beq.n	8002e0c <_vfiprintf_r+0xa4>
 8002df4:	465b      	mov	r3, fp
 8002df6:	4622      	mov	r2, r4
 8002df8:	4629      	mov	r1, r5
 8002dfa:	4630      	mov	r0, r6
 8002dfc:	f7ff ffa1 	bl	8002d42 <__sfputs_r>
 8002e00:	3001      	adds	r0, #1
 8002e02:	f000 80a7 	beq.w	8002f54 <_vfiprintf_r+0x1ec>
 8002e06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002e08:	445a      	add	r2, fp
 8002e0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8002e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 809f 	beq.w	8002f54 <_vfiprintf_r+0x1ec>
 8002e16:	2300      	movs	r3, #0
 8002e18:	f04f 32ff 	mov.w	r2, #4294967295
 8002e1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e20:	f10a 0a01 	add.w	sl, sl, #1
 8002e24:	9304      	str	r3, [sp, #16]
 8002e26:	9307      	str	r3, [sp, #28]
 8002e28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002e2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8002e2e:	4654      	mov	r4, sl
 8002e30:	2205      	movs	r2, #5
 8002e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e36:	4853      	ldr	r0, [pc, #332]	@ (8002f84 <_vfiprintf_r+0x21c>)
 8002e38:	f7fd f9d2 	bl	80001e0 <memchr>
 8002e3c:	9a04      	ldr	r2, [sp, #16]
 8002e3e:	b9d8      	cbnz	r0, 8002e78 <_vfiprintf_r+0x110>
 8002e40:	06d1      	lsls	r1, r2, #27
 8002e42:	bf44      	itt	mi
 8002e44:	2320      	movmi	r3, #32
 8002e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e4a:	0713      	lsls	r3, r2, #28
 8002e4c:	bf44      	itt	mi
 8002e4e:	232b      	movmi	r3, #43	@ 0x2b
 8002e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e54:	f89a 3000 	ldrb.w	r3, [sl]
 8002e58:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e5a:	d015      	beq.n	8002e88 <_vfiprintf_r+0x120>
 8002e5c:	9a07      	ldr	r2, [sp, #28]
 8002e5e:	4654      	mov	r4, sl
 8002e60:	2000      	movs	r0, #0
 8002e62:	f04f 0c0a 	mov.w	ip, #10
 8002e66:	4621      	mov	r1, r4
 8002e68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e6c:	3b30      	subs	r3, #48	@ 0x30
 8002e6e:	2b09      	cmp	r3, #9
 8002e70:	d94b      	bls.n	8002f0a <_vfiprintf_r+0x1a2>
 8002e72:	b1b0      	cbz	r0, 8002ea2 <_vfiprintf_r+0x13a>
 8002e74:	9207      	str	r2, [sp, #28]
 8002e76:	e014      	b.n	8002ea2 <_vfiprintf_r+0x13a>
 8002e78:	eba0 0308 	sub.w	r3, r0, r8
 8002e7c:	fa09 f303 	lsl.w	r3, r9, r3
 8002e80:	4313      	orrs	r3, r2
 8002e82:	9304      	str	r3, [sp, #16]
 8002e84:	46a2      	mov	sl, r4
 8002e86:	e7d2      	b.n	8002e2e <_vfiprintf_r+0xc6>
 8002e88:	9b03      	ldr	r3, [sp, #12]
 8002e8a:	1d19      	adds	r1, r3, #4
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	9103      	str	r1, [sp, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	bfbb      	ittet	lt
 8002e94:	425b      	neglt	r3, r3
 8002e96:	f042 0202 	orrlt.w	r2, r2, #2
 8002e9a:	9307      	strge	r3, [sp, #28]
 8002e9c:	9307      	strlt	r3, [sp, #28]
 8002e9e:	bfb8      	it	lt
 8002ea0:	9204      	strlt	r2, [sp, #16]
 8002ea2:	7823      	ldrb	r3, [r4, #0]
 8002ea4:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ea6:	d10a      	bne.n	8002ebe <_vfiprintf_r+0x156>
 8002ea8:	7863      	ldrb	r3, [r4, #1]
 8002eaa:	2b2a      	cmp	r3, #42	@ 0x2a
 8002eac:	d132      	bne.n	8002f14 <_vfiprintf_r+0x1ac>
 8002eae:	9b03      	ldr	r3, [sp, #12]
 8002eb0:	1d1a      	adds	r2, r3, #4
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	9203      	str	r2, [sp, #12]
 8002eb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002eba:	3402      	adds	r4, #2
 8002ebc:	9305      	str	r3, [sp, #20]
 8002ebe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002f94 <_vfiprintf_r+0x22c>
 8002ec2:	7821      	ldrb	r1, [r4, #0]
 8002ec4:	2203      	movs	r2, #3
 8002ec6:	4650      	mov	r0, sl
 8002ec8:	f7fd f98a 	bl	80001e0 <memchr>
 8002ecc:	b138      	cbz	r0, 8002ede <_vfiprintf_r+0x176>
 8002ece:	9b04      	ldr	r3, [sp, #16]
 8002ed0:	eba0 000a 	sub.w	r0, r0, sl
 8002ed4:	2240      	movs	r2, #64	@ 0x40
 8002ed6:	4082      	lsls	r2, r0
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	3401      	adds	r4, #1
 8002edc:	9304      	str	r3, [sp, #16]
 8002ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ee2:	4829      	ldr	r0, [pc, #164]	@ (8002f88 <_vfiprintf_r+0x220>)
 8002ee4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002ee8:	2206      	movs	r2, #6
 8002eea:	f7fd f979 	bl	80001e0 <memchr>
 8002eee:	2800      	cmp	r0, #0
 8002ef0:	d03f      	beq.n	8002f72 <_vfiprintf_r+0x20a>
 8002ef2:	4b26      	ldr	r3, [pc, #152]	@ (8002f8c <_vfiprintf_r+0x224>)
 8002ef4:	bb1b      	cbnz	r3, 8002f3e <_vfiprintf_r+0x1d6>
 8002ef6:	9b03      	ldr	r3, [sp, #12]
 8002ef8:	3307      	adds	r3, #7
 8002efa:	f023 0307 	bic.w	r3, r3, #7
 8002efe:	3308      	adds	r3, #8
 8002f00:	9303      	str	r3, [sp, #12]
 8002f02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f04:	443b      	add	r3, r7
 8002f06:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f08:	e76a      	b.n	8002de0 <_vfiprintf_r+0x78>
 8002f0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f0e:	460c      	mov	r4, r1
 8002f10:	2001      	movs	r0, #1
 8002f12:	e7a8      	b.n	8002e66 <_vfiprintf_r+0xfe>
 8002f14:	2300      	movs	r3, #0
 8002f16:	3401      	adds	r4, #1
 8002f18:	9305      	str	r3, [sp, #20]
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	f04f 0c0a 	mov.w	ip, #10
 8002f20:	4620      	mov	r0, r4
 8002f22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f26:	3a30      	subs	r2, #48	@ 0x30
 8002f28:	2a09      	cmp	r2, #9
 8002f2a:	d903      	bls.n	8002f34 <_vfiprintf_r+0x1cc>
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0c6      	beq.n	8002ebe <_vfiprintf_r+0x156>
 8002f30:	9105      	str	r1, [sp, #20]
 8002f32:	e7c4      	b.n	8002ebe <_vfiprintf_r+0x156>
 8002f34:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f38:	4604      	mov	r4, r0
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e7f0      	b.n	8002f20 <_vfiprintf_r+0x1b8>
 8002f3e:	ab03      	add	r3, sp, #12
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	462a      	mov	r2, r5
 8002f44:	4b12      	ldr	r3, [pc, #72]	@ (8002f90 <_vfiprintf_r+0x228>)
 8002f46:	a904      	add	r1, sp, #16
 8002f48:	4630      	mov	r0, r6
 8002f4a:	f3af 8000 	nop.w
 8002f4e:	4607      	mov	r7, r0
 8002f50:	1c78      	adds	r0, r7, #1
 8002f52:	d1d6      	bne.n	8002f02 <_vfiprintf_r+0x19a>
 8002f54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002f56:	07d9      	lsls	r1, r3, #31
 8002f58:	d405      	bmi.n	8002f66 <_vfiprintf_r+0x1fe>
 8002f5a:	89ab      	ldrh	r3, [r5, #12]
 8002f5c:	059a      	lsls	r2, r3, #22
 8002f5e:	d402      	bmi.n	8002f66 <_vfiprintf_r+0x1fe>
 8002f60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002f62:	f7ff fddd 	bl	8002b20 <__retarget_lock_release_recursive>
 8002f66:	89ab      	ldrh	r3, [r5, #12]
 8002f68:	065b      	lsls	r3, r3, #25
 8002f6a:	f53f af1f 	bmi.w	8002dac <_vfiprintf_r+0x44>
 8002f6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002f70:	e71e      	b.n	8002db0 <_vfiprintf_r+0x48>
 8002f72:	ab03      	add	r3, sp, #12
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	462a      	mov	r2, r5
 8002f78:	4b05      	ldr	r3, [pc, #20]	@ (8002f90 <_vfiprintf_r+0x228>)
 8002f7a:	a904      	add	r1, sp, #16
 8002f7c:	4630      	mov	r0, r6
 8002f7e:	f000 f879 	bl	8003074 <_printf_i>
 8002f82:	e7e4      	b.n	8002f4e <_vfiprintf_r+0x1e6>
 8002f84:	080036b4 	.word	0x080036b4
 8002f88:	080036be 	.word	0x080036be
 8002f8c:	00000000 	.word	0x00000000
 8002f90:	08002d43 	.word	0x08002d43
 8002f94:	080036ba 	.word	0x080036ba

08002f98 <_printf_common>:
 8002f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f9c:	4616      	mov	r6, r2
 8002f9e:	4698      	mov	r8, r3
 8002fa0:	688a      	ldr	r2, [r1, #8]
 8002fa2:	690b      	ldr	r3, [r1, #16]
 8002fa4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	bfb8      	it	lt
 8002fac:	4613      	movlt	r3, r2
 8002fae:	6033      	str	r3, [r6, #0]
 8002fb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002fb4:	4607      	mov	r7, r0
 8002fb6:	460c      	mov	r4, r1
 8002fb8:	b10a      	cbz	r2, 8002fbe <_printf_common+0x26>
 8002fba:	3301      	adds	r3, #1
 8002fbc:	6033      	str	r3, [r6, #0]
 8002fbe:	6823      	ldr	r3, [r4, #0]
 8002fc0:	0699      	lsls	r1, r3, #26
 8002fc2:	bf42      	ittt	mi
 8002fc4:	6833      	ldrmi	r3, [r6, #0]
 8002fc6:	3302      	addmi	r3, #2
 8002fc8:	6033      	strmi	r3, [r6, #0]
 8002fca:	6825      	ldr	r5, [r4, #0]
 8002fcc:	f015 0506 	ands.w	r5, r5, #6
 8002fd0:	d106      	bne.n	8002fe0 <_printf_common+0x48>
 8002fd2:	f104 0a19 	add.w	sl, r4, #25
 8002fd6:	68e3      	ldr	r3, [r4, #12]
 8002fd8:	6832      	ldr	r2, [r6, #0]
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	42ab      	cmp	r3, r5
 8002fde:	dc26      	bgt.n	800302e <_printf_common+0x96>
 8002fe0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002fe4:	6822      	ldr	r2, [r4, #0]
 8002fe6:	3b00      	subs	r3, #0
 8002fe8:	bf18      	it	ne
 8002fea:	2301      	movne	r3, #1
 8002fec:	0692      	lsls	r2, r2, #26
 8002fee:	d42b      	bmi.n	8003048 <_printf_common+0xb0>
 8002ff0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002ff4:	4641      	mov	r1, r8
 8002ff6:	4638      	mov	r0, r7
 8002ff8:	47c8      	blx	r9
 8002ffa:	3001      	adds	r0, #1
 8002ffc:	d01e      	beq.n	800303c <_printf_common+0xa4>
 8002ffe:	6823      	ldr	r3, [r4, #0]
 8003000:	6922      	ldr	r2, [r4, #16]
 8003002:	f003 0306 	and.w	r3, r3, #6
 8003006:	2b04      	cmp	r3, #4
 8003008:	bf02      	ittt	eq
 800300a:	68e5      	ldreq	r5, [r4, #12]
 800300c:	6833      	ldreq	r3, [r6, #0]
 800300e:	1aed      	subeq	r5, r5, r3
 8003010:	68a3      	ldr	r3, [r4, #8]
 8003012:	bf0c      	ite	eq
 8003014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003018:	2500      	movne	r5, #0
 800301a:	4293      	cmp	r3, r2
 800301c:	bfc4      	itt	gt
 800301e:	1a9b      	subgt	r3, r3, r2
 8003020:	18ed      	addgt	r5, r5, r3
 8003022:	2600      	movs	r6, #0
 8003024:	341a      	adds	r4, #26
 8003026:	42b5      	cmp	r5, r6
 8003028:	d11a      	bne.n	8003060 <_printf_common+0xc8>
 800302a:	2000      	movs	r0, #0
 800302c:	e008      	b.n	8003040 <_printf_common+0xa8>
 800302e:	2301      	movs	r3, #1
 8003030:	4652      	mov	r2, sl
 8003032:	4641      	mov	r1, r8
 8003034:	4638      	mov	r0, r7
 8003036:	47c8      	blx	r9
 8003038:	3001      	adds	r0, #1
 800303a:	d103      	bne.n	8003044 <_printf_common+0xac>
 800303c:	f04f 30ff 	mov.w	r0, #4294967295
 8003040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003044:	3501      	adds	r5, #1
 8003046:	e7c6      	b.n	8002fd6 <_printf_common+0x3e>
 8003048:	18e1      	adds	r1, r4, r3
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	2030      	movs	r0, #48	@ 0x30
 800304e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003052:	4422      	add	r2, r4
 8003054:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003058:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800305c:	3302      	adds	r3, #2
 800305e:	e7c7      	b.n	8002ff0 <_printf_common+0x58>
 8003060:	2301      	movs	r3, #1
 8003062:	4622      	mov	r2, r4
 8003064:	4641      	mov	r1, r8
 8003066:	4638      	mov	r0, r7
 8003068:	47c8      	blx	r9
 800306a:	3001      	adds	r0, #1
 800306c:	d0e6      	beq.n	800303c <_printf_common+0xa4>
 800306e:	3601      	adds	r6, #1
 8003070:	e7d9      	b.n	8003026 <_printf_common+0x8e>
	...

08003074 <_printf_i>:
 8003074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003078:	7e0f      	ldrb	r7, [r1, #24]
 800307a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800307c:	2f78      	cmp	r7, #120	@ 0x78
 800307e:	4691      	mov	r9, r2
 8003080:	4680      	mov	r8, r0
 8003082:	460c      	mov	r4, r1
 8003084:	469a      	mov	sl, r3
 8003086:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800308a:	d807      	bhi.n	800309c <_printf_i+0x28>
 800308c:	2f62      	cmp	r7, #98	@ 0x62
 800308e:	d80a      	bhi.n	80030a6 <_printf_i+0x32>
 8003090:	2f00      	cmp	r7, #0
 8003092:	f000 80d2 	beq.w	800323a <_printf_i+0x1c6>
 8003096:	2f58      	cmp	r7, #88	@ 0x58
 8003098:	f000 80b9 	beq.w	800320e <_printf_i+0x19a>
 800309c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80030a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80030a4:	e03a      	b.n	800311c <_printf_i+0xa8>
 80030a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80030aa:	2b15      	cmp	r3, #21
 80030ac:	d8f6      	bhi.n	800309c <_printf_i+0x28>
 80030ae:	a101      	add	r1, pc, #4	@ (adr r1, 80030b4 <_printf_i+0x40>)
 80030b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030b4:	0800310d 	.word	0x0800310d
 80030b8:	08003121 	.word	0x08003121
 80030bc:	0800309d 	.word	0x0800309d
 80030c0:	0800309d 	.word	0x0800309d
 80030c4:	0800309d 	.word	0x0800309d
 80030c8:	0800309d 	.word	0x0800309d
 80030cc:	08003121 	.word	0x08003121
 80030d0:	0800309d 	.word	0x0800309d
 80030d4:	0800309d 	.word	0x0800309d
 80030d8:	0800309d 	.word	0x0800309d
 80030dc:	0800309d 	.word	0x0800309d
 80030e0:	08003221 	.word	0x08003221
 80030e4:	0800314b 	.word	0x0800314b
 80030e8:	080031db 	.word	0x080031db
 80030ec:	0800309d 	.word	0x0800309d
 80030f0:	0800309d 	.word	0x0800309d
 80030f4:	08003243 	.word	0x08003243
 80030f8:	0800309d 	.word	0x0800309d
 80030fc:	0800314b 	.word	0x0800314b
 8003100:	0800309d 	.word	0x0800309d
 8003104:	0800309d 	.word	0x0800309d
 8003108:	080031e3 	.word	0x080031e3
 800310c:	6833      	ldr	r3, [r6, #0]
 800310e:	1d1a      	adds	r2, r3, #4
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6032      	str	r2, [r6, #0]
 8003114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003118:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800311c:	2301      	movs	r3, #1
 800311e:	e09d      	b.n	800325c <_printf_i+0x1e8>
 8003120:	6833      	ldr	r3, [r6, #0]
 8003122:	6820      	ldr	r0, [r4, #0]
 8003124:	1d19      	adds	r1, r3, #4
 8003126:	6031      	str	r1, [r6, #0]
 8003128:	0606      	lsls	r6, r0, #24
 800312a:	d501      	bpl.n	8003130 <_printf_i+0xbc>
 800312c:	681d      	ldr	r5, [r3, #0]
 800312e:	e003      	b.n	8003138 <_printf_i+0xc4>
 8003130:	0645      	lsls	r5, r0, #25
 8003132:	d5fb      	bpl.n	800312c <_printf_i+0xb8>
 8003134:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003138:	2d00      	cmp	r5, #0
 800313a:	da03      	bge.n	8003144 <_printf_i+0xd0>
 800313c:	232d      	movs	r3, #45	@ 0x2d
 800313e:	426d      	negs	r5, r5
 8003140:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003144:	4859      	ldr	r0, [pc, #356]	@ (80032ac <_printf_i+0x238>)
 8003146:	230a      	movs	r3, #10
 8003148:	e011      	b.n	800316e <_printf_i+0xfa>
 800314a:	6821      	ldr	r1, [r4, #0]
 800314c:	6833      	ldr	r3, [r6, #0]
 800314e:	0608      	lsls	r0, r1, #24
 8003150:	f853 5b04 	ldr.w	r5, [r3], #4
 8003154:	d402      	bmi.n	800315c <_printf_i+0xe8>
 8003156:	0649      	lsls	r1, r1, #25
 8003158:	bf48      	it	mi
 800315a:	b2ad      	uxthmi	r5, r5
 800315c:	2f6f      	cmp	r7, #111	@ 0x6f
 800315e:	4853      	ldr	r0, [pc, #332]	@ (80032ac <_printf_i+0x238>)
 8003160:	6033      	str	r3, [r6, #0]
 8003162:	bf14      	ite	ne
 8003164:	230a      	movne	r3, #10
 8003166:	2308      	moveq	r3, #8
 8003168:	2100      	movs	r1, #0
 800316a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800316e:	6866      	ldr	r6, [r4, #4]
 8003170:	60a6      	str	r6, [r4, #8]
 8003172:	2e00      	cmp	r6, #0
 8003174:	bfa2      	ittt	ge
 8003176:	6821      	ldrge	r1, [r4, #0]
 8003178:	f021 0104 	bicge.w	r1, r1, #4
 800317c:	6021      	strge	r1, [r4, #0]
 800317e:	b90d      	cbnz	r5, 8003184 <_printf_i+0x110>
 8003180:	2e00      	cmp	r6, #0
 8003182:	d04b      	beq.n	800321c <_printf_i+0x1a8>
 8003184:	4616      	mov	r6, r2
 8003186:	fbb5 f1f3 	udiv	r1, r5, r3
 800318a:	fb03 5711 	mls	r7, r3, r1, r5
 800318e:	5dc7      	ldrb	r7, [r0, r7]
 8003190:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003194:	462f      	mov	r7, r5
 8003196:	42bb      	cmp	r3, r7
 8003198:	460d      	mov	r5, r1
 800319a:	d9f4      	bls.n	8003186 <_printf_i+0x112>
 800319c:	2b08      	cmp	r3, #8
 800319e:	d10b      	bne.n	80031b8 <_printf_i+0x144>
 80031a0:	6823      	ldr	r3, [r4, #0]
 80031a2:	07df      	lsls	r7, r3, #31
 80031a4:	d508      	bpl.n	80031b8 <_printf_i+0x144>
 80031a6:	6923      	ldr	r3, [r4, #16]
 80031a8:	6861      	ldr	r1, [r4, #4]
 80031aa:	4299      	cmp	r1, r3
 80031ac:	bfde      	ittt	le
 80031ae:	2330      	movle	r3, #48	@ 0x30
 80031b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80031b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80031b8:	1b92      	subs	r2, r2, r6
 80031ba:	6122      	str	r2, [r4, #16]
 80031bc:	f8cd a000 	str.w	sl, [sp]
 80031c0:	464b      	mov	r3, r9
 80031c2:	aa03      	add	r2, sp, #12
 80031c4:	4621      	mov	r1, r4
 80031c6:	4640      	mov	r0, r8
 80031c8:	f7ff fee6 	bl	8002f98 <_printf_common>
 80031cc:	3001      	adds	r0, #1
 80031ce:	d14a      	bne.n	8003266 <_printf_i+0x1f2>
 80031d0:	f04f 30ff 	mov.w	r0, #4294967295
 80031d4:	b004      	add	sp, #16
 80031d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031da:	6823      	ldr	r3, [r4, #0]
 80031dc:	f043 0320 	orr.w	r3, r3, #32
 80031e0:	6023      	str	r3, [r4, #0]
 80031e2:	4833      	ldr	r0, [pc, #204]	@ (80032b0 <_printf_i+0x23c>)
 80031e4:	2778      	movs	r7, #120	@ 0x78
 80031e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	6831      	ldr	r1, [r6, #0]
 80031ee:	061f      	lsls	r7, r3, #24
 80031f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80031f4:	d402      	bmi.n	80031fc <_printf_i+0x188>
 80031f6:	065f      	lsls	r7, r3, #25
 80031f8:	bf48      	it	mi
 80031fa:	b2ad      	uxthmi	r5, r5
 80031fc:	6031      	str	r1, [r6, #0]
 80031fe:	07d9      	lsls	r1, r3, #31
 8003200:	bf44      	itt	mi
 8003202:	f043 0320 	orrmi.w	r3, r3, #32
 8003206:	6023      	strmi	r3, [r4, #0]
 8003208:	b11d      	cbz	r5, 8003212 <_printf_i+0x19e>
 800320a:	2310      	movs	r3, #16
 800320c:	e7ac      	b.n	8003168 <_printf_i+0xf4>
 800320e:	4827      	ldr	r0, [pc, #156]	@ (80032ac <_printf_i+0x238>)
 8003210:	e7e9      	b.n	80031e6 <_printf_i+0x172>
 8003212:	6823      	ldr	r3, [r4, #0]
 8003214:	f023 0320 	bic.w	r3, r3, #32
 8003218:	6023      	str	r3, [r4, #0]
 800321a:	e7f6      	b.n	800320a <_printf_i+0x196>
 800321c:	4616      	mov	r6, r2
 800321e:	e7bd      	b.n	800319c <_printf_i+0x128>
 8003220:	6833      	ldr	r3, [r6, #0]
 8003222:	6825      	ldr	r5, [r4, #0]
 8003224:	6961      	ldr	r1, [r4, #20]
 8003226:	1d18      	adds	r0, r3, #4
 8003228:	6030      	str	r0, [r6, #0]
 800322a:	062e      	lsls	r6, r5, #24
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	d501      	bpl.n	8003234 <_printf_i+0x1c0>
 8003230:	6019      	str	r1, [r3, #0]
 8003232:	e002      	b.n	800323a <_printf_i+0x1c6>
 8003234:	0668      	lsls	r0, r5, #25
 8003236:	d5fb      	bpl.n	8003230 <_printf_i+0x1bc>
 8003238:	8019      	strh	r1, [r3, #0]
 800323a:	2300      	movs	r3, #0
 800323c:	6123      	str	r3, [r4, #16]
 800323e:	4616      	mov	r6, r2
 8003240:	e7bc      	b.n	80031bc <_printf_i+0x148>
 8003242:	6833      	ldr	r3, [r6, #0]
 8003244:	1d1a      	adds	r2, r3, #4
 8003246:	6032      	str	r2, [r6, #0]
 8003248:	681e      	ldr	r6, [r3, #0]
 800324a:	6862      	ldr	r2, [r4, #4]
 800324c:	2100      	movs	r1, #0
 800324e:	4630      	mov	r0, r6
 8003250:	f7fc ffc6 	bl	80001e0 <memchr>
 8003254:	b108      	cbz	r0, 800325a <_printf_i+0x1e6>
 8003256:	1b80      	subs	r0, r0, r6
 8003258:	6060      	str	r0, [r4, #4]
 800325a:	6863      	ldr	r3, [r4, #4]
 800325c:	6123      	str	r3, [r4, #16]
 800325e:	2300      	movs	r3, #0
 8003260:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003264:	e7aa      	b.n	80031bc <_printf_i+0x148>
 8003266:	6923      	ldr	r3, [r4, #16]
 8003268:	4632      	mov	r2, r6
 800326a:	4649      	mov	r1, r9
 800326c:	4640      	mov	r0, r8
 800326e:	47d0      	blx	sl
 8003270:	3001      	adds	r0, #1
 8003272:	d0ad      	beq.n	80031d0 <_printf_i+0x15c>
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	079b      	lsls	r3, r3, #30
 8003278:	d413      	bmi.n	80032a2 <_printf_i+0x22e>
 800327a:	68e0      	ldr	r0, [r4, #12]
 800327c:	9b03      	ldr	r3, [sp, #12]
 800327e:	4298      	cmp	r0, r3
 8003280:	bfb8      	it	lt
 8003282:	4618      	movlt	r0, r3
 8003284:	e7a6      	b.n	80031d4 <_printf_i+0x160>
 8003286:	2301      	movs	r3, #1
 8003288:	4632      	mov	r2, r6
 800328a:	4649      	mov	r1, r9
 800328c:	4640      	mov	r0, r8
 800328e:	47d0      	blx	sl
 8003290:	3001      	adds	r0, #1
 8003292:	d09d      	beq.n	80031d0 <_printf_i+0x15c>
 8003294:	3501      	adds	r5, #1
 8003296:	68e3      	ldr	r3, [r4, #12]
 8003298:	9903      	ldr	r1, [sp, #12]
 800329a:	1a5b      	subs	r3, r3, r1
 800329c:	42ab      	cmp	r3, r5
 800329e:	dcf2      	bgt.n	8003286 <_printf_i+0x212>
 80032a0:	e7eb      	b.n	800327a <_printf_i+0x206>
 80032a2:	2500      	movs	r5, #0
 80032a4:	f104 0619 	add.w	r6, r4, #25
 80032a8:	e7f5      	b.n	8003296 <_printf_i+0x222>
 80032aa:	bf00      	nop
 80032ac:	080036c5 	.word	0x080036c5
 80032b0:	080036d6 	.word	0x080036d6

080032b4 <__sflush_r>:
 80032b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80032b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032bc:	0716      	lsls	r6, r2, #28
 80032be:	4605      	mov	r5, r0
 80032c0:	460c      	mov	r4, r1
 80032c2:	d454      	bmi.n	800336e <__sflush_r+0xba>
 80032c4:	684b      	ldr	r3, [r1, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	dc02      	bgt.n	80032d0 <__sflush_r+0x1c>
 80032ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	dd48      	ble.n	8003362 <__sflush_r+0xae>
 80032d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80032d2:	2e00      	cmp	r6, #0
 80032d4:	d045      	beq.n	8003362 <__sflush_r+0xae>
 80032d6:	2300      	movs	r3, #0
 80032d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80032dc:	682f      	ldr	r7, [r5, #0]
 80032de:	6a21      	ldr	r1, [r4, #32]
 80032e0:	602b      	str	r3, [r5, #0]
 80032e2:	d030      	beq.n	8003346 <__sflush_r+0x92>
 80032e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80032e6:	89a3      	ldrh	r3, [r4, #12]
 80032e8:	0759      	lsls	r1, r3, #29
 80032ea:	d505      	bpl.n	80032f8 <__sflush_r+0x44>
 80032ec:	6863      	ldr	r3, [r4, #4]
 80032ee:	1ad2      	subs	r2, r2, r3
 80032f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80032f2:	b10b      	cbz	r3, 80032f8 <__sflush_r+0x44>
 80032f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80032f6:	1ad2      	subs	r2, r2, r3
 80032f8:	2300      	movs	r3, #0
 80032fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80032fc:	6a21      	ldr	r1, [r4, #32]
 80032fe:	4628      	mov	r0, r5
 8003300:	47b0      	blx	r6
 8003302:	1c43      	adds	r3, r0, #1
 8003304:	89a3      	ldrh	r3, [r4, #12]
 8003306:	d106      	bne.n	8003316 <__sflush_r+0x62>
 8003308:	6829      	ldr	r1, [r5, #0]
 800330a:	291d      	cmp	r1, #29
 800330c:	d82b      	bhi.n	8003366 <__sflush_r+0xb2>
 800330e:	4a2a      	ldr	r2, [pc, #168]	@ (80033b8 <__sflush_r+0x104>)
 8003310:	410a      	asrs	r2, r1
 8003312:	07d6      	lsls	r6, r2, #31
 8003314:	d427      	bmi.n	8003366 <__sflush_r+0xb2>
 8003316:	2200      	movs	r2, #0
 8003318:	6062      	str	r2, [r4, #4]
 800331a:	04d9      	lsls	r1, r3, #19
 800331c:	6922      	ldr	r2, [r4, #16]
 800331e:	6022      	str	r2, [r4, #0]
 8003320:	d504      	bpl.n	800332c <__sflush_r+0x78>
 8003322:	1c42      	adds	r2, r0, #1
 8003324:	d101      	bne.n	800332a <__sflush_r+0x76>
 8003326:	682b      	ldr	r3, [r5, #0]
 8003328:	b903      	cbnz	r3, 800332c <__sflush_r+0x78>
 800332a:	6560      	str	r0, [r4, #84]	@ 0x54
 800332c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800332e:	602f      	str	r7, [r5, #0]
 8003330:	b1b9      	cbz	r1, 8003362 <__sflush_r+0xae>
 8003332:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003336:	4299      	cmp	r1, r3
 8003338:	d002      	beq.n	8003340 <__sflush_r+0x8c>
 800333a:	4628      	mov	r0, r5
 800333c:	f7ff fbf2 	bl	8002b24 <_free_r>
 8003340:	2300      	movs	r3, #0
 8003342:	6363      	str	r3, [r4, #52]	@ 0x34
 8003344:	e00d      	b.n	8003362 <__sflush_r+0xae>
 8003346:	2301      	movs	r3, #1
 8003348:	4628      	mov	r0, r5
 800334a:	47b0      	blx	r6
 800334c:	4602      	mov	r2, r0
 800334e:	1c50      	adds	r0, r2, #1
 8003350:	d1c9      	bne.n	80032e6 <__sflush_r+0x32>
 8003352:	682b      	ldr	r3, [r5, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0c6      	beq.n	80032e6 <__sflush_r+0x32>
 8003358:	2b1d      	cmp	r3, #29
 800335a:	d001      	beq.n	8003360 <__sflush_r+0xac>
 800335c:	2b16      	cmp	r3, #22
 800335e:	d11e      	bne.n	800339e <__sflush_r+0xea>
 8003360:	602f      	str	r7, [r5, #0]
 8003362:	2000      	movs	r0, #0
 8003364:	e022      	b.n	80033ac <__sflush_r+0xf8>
 8003366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800336a:	b21b      	sxth	r3, r3
 800336c:	e01b      	b.n	80033a6 <__sflush_r+0xf2>
 800336e:	690f      	ldr	r7, [r1, #16]
 8003370:	2f00      	cmp	r7, #0
 8003372:	d0f6      	beq.n	8003362 <__sflush_r+0xae>
 8003374:	0793      	lsls	r3, r2, #30
 8003376:	680e      	ldr	r6, [r1, #0]
 8003378:	bf08      	it	eq
 800337a:	694b      	ldreq	r3, [r1, #20]
 800337c:	600f      	str	r7, [r1, #0]
 800337e:	bf18      	it	ne
 8003380:	2300      	movne	r3, #0
 8003382:	eba6 0807 	sub.w	r8, r6, r7
 8003386:	608b      	str	r3, [r1, #8]
 8003388:	f1b8 0f00 	cmp.w	r8, #0
 800338c:	dde9      	ble.n	8003362 <__sflush_r+0xae>
 800338e:	6a21      	ldr	r1, [r4, #32]
 8003390:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003392:	4643      	mov	r3, r8
 8003394:	463a      	mov	r2, r7
 8003396:	4628      	mov	r0, r5
 8003398:	47b0      	blx	r6
 800339a:	2800      	cmp	r0, #0
 800339c:	dc08      	bgt.n	80033b0 <__sflush_r+0xfc>
 800339e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033a6:	81a3      	strh	r3, [r4, #12]
 80033a8:	f04f 30ff 	mov.w	r0, #4294967295
 80033ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033b0:	4407      	add	r7, r0
 80033b2:	eba8 0800 	sub.w	r8, r8, r0
 80033b6:	e7e7      	b.n	8003388 <__sflush_r+0xd4>
 80033b8:	dfbffffe 	.word	0xdfbffffe

080033bc <_fflush_r>:
 80033bc:	b538      	push	{r3, r4, r5, lr}
 80033be:	690b      	ldr	r3, [r1, #16]
 80033c0:	4605      	mov	r5, r0
 80033c2:	460c      	mov	r4, r1
 80033c4:	b913      	cbnz	r3, 80033cc <_fflush_r+0x10>
 80033c6:	2500      	movs	r5, #0
 80033c8:	4628      	mov	r0, r5
 80033ca:	bd38      	pop	{r3, r4, r5, pc}
 80033cc:	b118      	cbz	r0, 80033d6 <_fflush_r+0x1a>
 80033ce:	6a03      	ldr	r3, [r0, #32]
 80033d0:	b90b      	cbnz	r3, 80033d6 <_fflush_r+0x1a>
 80033d2:	f7ff fa9f 	bl	8002914 <__sinit>
 80033d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f3      	beq.n	80033c6 <_fflush_r+0xa>
 80033de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80033e0:	07d0      	lsls	r0, r2, #31
 80033e2:	d404      	bmi.n	80033ee <_fflush_r+0x32>
 80033e4:	0599      	lsls	r1, r3, #22
 80033e6:	d402      	bmi.n	80033ee <_fflush_r+0x32>
 80033e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033ea:	f7ff fb98 	bl	8002b1e <__retarget_lock_acquire_recursive>
 80033ee:	4628      	mov	r0, r5
 80033f0:	4621      	mov	r1, r4
 80033f2:	f7ff ff5f 	bl	80032b4 <__sflush_r>
 80033f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80033f8:	07da      	lsls	r2, r3, #31
 80033fa:	4605      	mov	r5, r0
 80033fc:	d4e4      	bmi.n	80033c8 <_fflush_r+0xc>
 80033fe:	89a3      	ldrh	r3, [r4, #12]
 8003400:	059b      	lsls	r3, r3, #22
 8003402:	d4e1      	bmi.n	80033c8 <_fflush_r+0xc>
 8003404:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003406:	f7ff fb8b 	bl	8002b20 <__retarget_lock_release_recursive>
 800340a:	e7dd      	b.n	80033c8 <_fflush_r+0xc>

0800340c <__swbuf_r>:
 800340c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340e:	460e      	mov	r6, r1
 8003410:	4614      	mov	r4, r2
 8003412:	4605      	mov	r5, r0
 8003414:	b118      	cbz	r0, 800341e <__swbuf_r+0x12>
 8003416:	6a03      	ldr	r3, [r0, #32]
 8003418:	b90b      	cbnz	r3, 800341e <__swbuf_r+0x12>
 800341a:	f7ff fa7b 	bl	8002914 <__sinit>
 800341e:	69a3      	ldr	r3, [r4, #24]
 8003420:	60a3      	str	r3, [r4, #8]
 8003422:	89a3      	ldrh	r3, [r4, #12]
 8003424:	071a      	lsls	r2, r3, #28
 8003426:	d501      	bpl.n	800342c <__swbuf_r+0x20>
 8003428:	6923      	ldr	r3, [r4, #16]
 800342a:	b943      	cbnz	r3, 800343e <__swbuf_r+0x32>
 800342c:	4621      	mov	r1, r4
 800342e:	4628      	mov	r0, r5
 8003430:	f000 f82a 	bl	8003488 <__swsetup_r>
 8003434:	b118      	cbz	r0, 800343e <__swbuf_r+0x32>
 8003436:	f04f 37ff 	mov.w	r7, #4294967295
 800343a:	4638      	mov	r0, r7
 800343c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	6922      	ldr	r2, [r4, #16]
 8003442:	1a98      	subs	r0, r3, r2
 8003444:	6963      	ldr	r3, [r4, #20]
 8003446:	b2f6      	uxtb	r6, r6
 8003448:	4283      	cmp	r3, r0
 800344a:	4637      	mov	r7, r6
 800344c:	dc05      	bgt.n	800345a <__swbuf_r+0x4e>
 800344e:	4621      	mov	r1, r4
 8003450:	4628      	mov	r0, r5
 8003452:	f7ff ffb3 	bl	80033bc <_fflush_r>
 8003456:	2800      	cmp	r0, #0
 8003458:	d1ed      	bne.n	8003436 <__swbuf_r+0x2a>
 800345a:	68a3      	ldr	r3, [r4, #8]
 800345c:	3b01      	subs	r3, #1
 800345e:	60a3      	str	r3, [r4, #8]
 8003460:	6823      	ldr	r3, [r4, #0]
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	6022      	str	r2, [r4, #0]
 8003466:	701e      	strb	r6, [r3, #0]
 8003468:	6962      	ldr	r2, [r4, #20]
 800346a:	1c43      	adds	r3, r0, #1
 800346c:	429a      	cmp	r2, r3
 800346e:	d004      	beq.n	800347a <__swbuf_r+0x6e>
 8003470:	89a3      	ldrh	r3, [r4, #12]
 8003472:	07db      	lsls	r3, r3, #31
 8003474:	d5e1      	bpl.n	800343a <__swbuf_r+0x2e>
 8003476:	2e0a      	cmp	r6, #10
 8003478:	d1df      	bne.n	800343a <__swbuf_r+0x2e>
 800347a:	4621      	mov	r1, r4
 800347c:	4628      	mov	r0, r5
 800347e:	f7ff ff9d 	bl	80033bc <_fflush_r>
 8003482:	2800      	cmp	r0, #0
 8003484:	d0d9      	beq.n	800343a <__swbuf_r+0x2e>
 8003486:	e7d6      	b.n	8003436 <__swbuf_r+0x2a>

08003488 <__swsetup_r>:
 8003488:	b538      	push	{r3, r4, r5, lr}
 800348a:	4b29      	ldr	r3, [pc, #164]	@ (8003530 <__swsetup_r+0xa8>)
 800348c:	4605      	mov	r5, r0
 800348e:	6818      	ldr	r0, [r3, #0]
 8003490:	460c      	mov	r4, r1
 8003492:	b118      	cbz	r0, 800349c <__swsetup_r+0x14>
 8003494:	6a03      	ldr	r3, [r0, #32]
 8003496:	b90b      	cbnz	r3, 800349c <__swsetup_r+0x14>
 8003498:	f7ff fa3c 	bl	8002914 <__sinit>
 800349c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034a0:	0719      	lsls	r1, r3, #28
 80034a2:	d422      	bmi.n	80034ea <__swsetup_r+0x62>
 80034a4:	06da      	lsls	r2, r3, #27
 80034a6:	d407      	bmi.n	80034b8 <__swsetup_r+0x30>
 80034a8:	2209      	movs	r2, #9
 80034aa:	602a      	str	r2, [r5, #0]
 80034ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034b0:	81a3      	strh	r3, [r4, #12]
 80034b2:	f04f 30ff 	mov.w	r0, #4294967295
 80034b6:	e033      	b.n	8003520 <__swsetup_r+0x98>
 80034b8:	0758      	lsls	r0, r3, #29
 80034ba:	d512      	bpl.n	80034e2 <__swsetup_r+0x5a>
 80034bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80034be:	b141      	cbz	r1, 80034d2 <__swsetup_r+0x4a>
 80034c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80034c4:	4299      	cmp	r1, r3
 80034c6:	d002      	beq.n	80034ce <__swsetup_r+0x46>
 80034c8:	4628      	mov	r0, r5
 80034ca:	f7ff fb2b 	bl	8002b24 <_free_r>
 80034ce:	2300      	movs	r3, #0
 80034d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80034d2:	89a3      	ldrh	r3, [r4, #12]
 80034d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80034d8:	81a3      	strh	r3, [r4, #12]
 80034da:	2300      	movs	r3, #0
 80034dc:	6063      	str	r3, [r4, #4]
 80034de:	6923      	ldr	r3, [r4, #16]
 80034e0:	6023      	str	r3, [r4, #0]
 80034e2:	89a3      	ldrh	r3, [r4, #12]
 80034e4:	f043 0308 	orr.w	r3, r3, #8
 80034e8:	81a3      	strh	r3, [r4, #12]
 80034ea:	6923      	ldr	r3, [r4, #16]
 80034ec:	b94b      	cbnz	r3, 8003502 <__swsetup_r+0x7a>
 80034ee:	89a3      	ldrh	r3, [r4, #12]
 80034f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80034f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034f8:	d003      	beq.n	8003502 <__swsetup_r+0x7a>
 80034fa:	4621      	mov	r1, r4
 80034fc:	4628      	mov	r0, r5
 80034fe:	f000 f84f 	bl	80035a0 <__smakebuf_r>
 8003502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003506:	f013 0201 	ands.w	r2, r3, #1
 800350a:	d00a      	beq.n	8003522 <__swsetup_r+0x9a>
 800350c:	2200      	movs	r2, #0
 800350e:	60a2      	str	r2, [r4, #8]
 8003510:	6962      	ldr	r2, [r4, #20]
 8003512:	4252      	negs	r2, r2
 8003514:	61a2      	str	r2, [r4, #24]
 8003516:	6922      	ldr	r2, [r4, #16]
 8003518:	b942      	cbnz	r2, 800352c <__swsetup_r+0xa4>
 800351a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800351e:	d1c5      	bne.n	80034ac <__swsetup_r+0x24>
 8003520:	bd38      	pop	{r3, r4, r5, pc}
 8003522:	0799      	lsls	r1, r3, #30
 8003524:	bf58      	it	pl
 8003526:	6962      	ldrpl	r2, [r4, #20]
 8003528:	60a2      	str	r2, [r4, #8]
 800352a:	e7f4      	b.n	8003516 <__swsetup_r+0x8e>
 800352c:	2000      	movs	r0, #0
 800352e:	e7f7      	b.n	8003520 <__swsetup_r+0x98>
 8003530:	20000018 	.word	0x20000018

08003534 <_sbrk_r>:
 8003534:	b538      	push	{r3, r4, r5, lr}
 8003536:	4d06      	ldr	r5, [pc, #24]	@ (8003550 <_sbrk_r+0x1c>)
 8003538:	2300      	movs	r3, #0
 800353a:	4604      	mov	r4, r0
 800353c:	4608      	mov	r0, r1
 800353e:	602b      	str	r3, [r5, #0]
 8003540:	f7fd fc38 	bl	8000db4 <_sbrk>
 8003544:	1c43      	adds	r3, r0, #1
 8003546:	d102      	bne.n	800354e <_sbrk_r+0x1a>
 8003548:	682b      	ldr	r3, [r5, #0]
 800354a:	b103      	cbz	r3, 800354e <_sbrk_r+0x1a>
 800354c:	6023      	str	r3, [r4, #0]
 800354e:	bd38      	pop	{r3, r4, r5, pc}
 8003550:	20000270 	.word	0x20000270

08003554 <__swhatbuf_r>:
 8003554:	b570      	push	{r4, r5, r6, lr}
 8003556:	460c      	mov	r4, r1
 8003558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800355c:	2900      	cmp	r1, #0
 800355e:	b096      	sub	sp, #88	@ 0x58
 8003560:	4615      	mov	r5, r2
 8003562:	461e      	mov	r6, r3
 8003564:	da0d      	bge.n	8003582 <__swhatbuf_r+0x2e>
 8003566:	89a3      	ldrh	r3, [r4, #12]
 8003568:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800356c:	f04f 0100 	mov.w	r1, #0
 8003570:	bf14      	ite	ne
 8003572:	2340      	movne	r3, #64	@ 0x40
 8003574:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003578:	2000      	movs	r0, #0
 800357a:	6031      	str	r1, [r6, #0]
 800357c:	602b      	str	r3, [r5, #0]
 800357e:	b016      	add	sp, #88	@ 0x58
 8003580:	bd70      	pop	{r4, r5, r6, pc}
 8003582:	466a      	mov	r2, sp
 8003584:	f000 f848 	bl	8003618 <_fstat_r>
 8003588:	2800      	cmp	r0, #0
 800358a:	dbec      	blt.n	8003566 <__swhatbuf_r+0x12>
 800358c:	9901      	ldr	r1, [sp, #4]
 800358e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003592:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003596:	4259      	negs	r1, r3
 8003598:	4159      	adcs	r1, r3
 800359a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800359e:	e7eb      	b.n	8003578 <__swhatbuf_r+0x24>

080035a0 <__smakebuf_r>:
 80035a0:	898b      	ldrh	r3, [r1, #12]
 80035a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035a4:	079d      	lsls	r5, r3, #30
 80035a6:	4606      	mov	r6, r0
 80035a8:	460c      	mov	r4, r1
 80035aa:	d507      	bpl.n	80035bc <__smakebuf_r+0x1c>
 80035ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80035b0:	6023      	str	r3, [r4, #0]
 80035b2:	6123      	str	r3, [r4, #16]
 80035b4:	2301      	movs	r3, #1
 80035b6:	6163      	str	r3, [r4, #20]
 80035b8:	b003      	add	sp, #12
 80035ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035bc:	ab01      	add	r3, sp, #4
 80035be:	466a      	mov	r2, sp
 80035c0:	f7ff ffc8 	bl	8003554 <__swhatbuf_r>
 80035c4:	9f00      	ldr	r7, [sp, #0]
 80035c6:	4605      	mov	r5, r0
 80035c8:	4639      	mov	r1, r7
 80035ca:	4630      	mov	r0, r6
 80035cc:	f7ff fb16 	bl	8002bfc <_malloc_r>
 80035d0:	b948      	cbnz	r0, 80035e6 <__smakebuf_r+0x46>
 80035d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035d6:	059a      	lsls	r2, r3, #22
 80035d8:	d4ee      	bmi.n	80035b8 <__smakebuf_r+0x18>
 80035da:	f023 0303 	bic.w	r3, r3, #3
 80035de:	f043 0302 	orr.w	r3, r3, #2
 80035e2:	81a3      	strh	r3, [r4, #12]
 80035e4:	e7e2      	b.n	80035ac <__smakebuf_r+0xc>
 80035e6:	89a3      	ldrh	r3, [r4, #12]
 80035e8:	6020      	str	r0, [r4, #0]
 80035ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035ee:	81a3      	strh	r3, [r4, #12]
 80035f0:	9b01      	ldr	r3, [sp, #4]
 80035f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80035f6:	b15b      	cbz	r3, 8003610 <__smakebuf_r+0x70>
 80035f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035fc:	4630      	mov	r0, r6
 80035fe:	f000 f81d 	bl	800363c <_isatty_r>
 8003602:	b128      	cbz	r0, 8003610 <__smakebuf_r+0x70>
 8003604:	89a3      	ldrh	r3, [r4, #12]
 8003606:	f023 0303 	bic.w	r3, r3, #3
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	81a3      	strh	r3, [r4, #12]
 8003610:	89a3      	ldrh	r3, [r4, #12]
 8003612:	431d      	orrs	r5, r3
 8003614:	81a5      	strh	r5, [r4, #12]
 8003616:	e7cf      	b.n	80035b8 <__smakebuf_r+0x18>

08003618 <_fstat_r>:
 8003618:	b538      	push	{r3, r4, r5, lr}
 800361a:	4d07      	ldr	r5, [pc, #28]	@ (8003638 <_fstat_r+0x20>)
 800361c:	2300      	movs	r3, #0
 800361e:	4604      	mov	r4, r0
 8003620:	4608      	mov	r0, r1
 8003622:	4611      	mov	r1, r2
 8003624:	602b      	str	r3, [r5, #0]
 8003626:	f7fd fb9d 	bl	8000d64 <_fstat>
 800362a:	1c43      	adds	r3, r0, #1
 800362c:	d102      	bne.n	8003634 <_fstat_r+0x1c>
 800362e:	682b      	ldr	r3, [r5, #0]
 8003630:	b103      	cbz	r3, 8003634 <_fstat_r+0x1c>
 8003632:	6023      	str	r3, [r4, #0]
 8003634:	bd38      	pop	{r3, r4, r5, pc}
 8003636:	bf00      	nop
 8003638:	20000270 	.word	0x20000270

0800363c <_isatty_r>:
 800363c:	b538      	push	{r3, r4, r5, lr}
 800363e:	4d06      	ldr	r5, [pc, #24]	@ (8003658 <_isatty_r+0x1c>)
 8003640:	2300      	movs	r3, #0
 8003642:	4604      	mov	r4, r0
 8003644:	4608      	mov	r0, r1
 8003646:	602b      	str	r3, [r5, #0]
 8003648:	f7fd fb9c 	bl	8000d84 <_isatty>
 800364c:	1c43      	adds	r3, r0, #1
 800364e:	d102      	bne.n	8003656 <_isatty_r+0x1a>
 8003650:	682b      	ldr	r3, [r5, #0]
 8003652:	b103      	cbz	r3, 8003656 <_isatty_r+0x1a>
 8003654:	6023      	str	r3, [r4, #0]
 8003656:	bd38      	pop	{r3, r4, r5, pc}
 8003658:	20000270 	.word	0x20000270

0800365c <_init>:
 800365c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365e:	bf00      	nop
 8003660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003662:	bc08      	pop	{r3}
 8003664:	469e      	mov	lr, r3
 8003666:	4770      	bx	lr

08003668 <_fini>:
 8003668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366a:	bf00      	nop
 800366c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366e:	bc08      	pop	{r3}
 8003670:	469e      	mov	lr, r3
 8003672:	4770      	bx	lr
